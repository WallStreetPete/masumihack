"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ai";
exports.ids = ["vendor-chunks/ai"];
exports.modules = {

/***/ "(rsc)/./node_modules/ai/dist/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/ai/dist/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AISDKError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError),\n/* harmony export */   APICallError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError),\n/* harmony export */   AssistantResponse: () => (/* binding */ AssistantResponse),\n/* harmony export */   DownloadError: () => (/* binding */ DownloadError),\n/* harmony export */   EmptyResponseBodyError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.EmptyResponseBodyError),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidDataContentError: () => (/* binding */ InvalidDataContentError),\n/* harmony export */   InvalidMessageRoleError: () => (/* binding */ InvalidMessageRoleError),\n/* harmony export */   InvalidPromptError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError),\n/* harmony export */   InvalidResponseDataError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidResponseDataError),\n/* harmony export */   InvalidStreamPartError: () => (/* binding */ InvalidStreamPartError),\n/* harmony export */   InvalidToolArgumentsError: () => (/* binding */ InvalidToolArgumentsError),\n/* harmony export */   JSONParseError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError),\n/* harmony export */   LangChainAdapter: () => (/* binding */ langchain_adapter_exports),\n/* harmony export */   LlamaIndexAdapter: () => (/* binding */ llamaindex_adapter_exports),\n/* harmony export */   LoadAPIKeyError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError),\n/* harmony export */   MCPClientError: () => (/* binding */ MCPClientError),\n/* harmony export */   MessageConversionError: () => (/* binding */ MessageConversionError),\n/* harmony export */   NoContentGeneratedError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoContentGeneratedError),\n/* harmony export */   NoImageGeneratedError: () => (/* binding */ NoImageGeneratedError),\n/* harmony export */   NoObjectGeneratedError: () => (/* binding */ NoObjectGeneratedError),\n/* harmony export */   NoOutputSpecifiedError: () => (/* binding */ NoOutputSpecifiedError),\n/* harmony export */   NoSuchModelError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError),\n/* harmony export */   NoSuchProviderError: () => (/* binding */ NoSuchProviderError),\n/* harmony export */   NoSuchToolError: () => (/* binding */ NoSuchToolError),\n/* harmony export */   Output: () => (/* binding */ output_exports),\n/* harmony export */   RetryError: () => (/* binding */ RetryError),\n/* harmony export */   StreamData: () => (/* binding */ StreamData),\n/* harmony export */   ToolCallRepairError: () => (/* binding */ ToolCallRepairError),\n/* harmony export */   ToolExecutionError: () => (/* binding */ ToolExecutionError),\n/* harmony export */   TypeValidationError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError),\n/* harmony export */   UnsupportedFunctionalityError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError),\n/* harmony export */   appendClientMessage: () => (/* binding */ appendClientMessage),\n/* harmony export */   appendResponseMessages: () => (/* binding */ appendResponseMessages),\n/* harmony export */   convertToCoreMessages: () => (/* binding */ convertToCoreMessages),\n/* harmony export */   coreAssistantMessageSchema: () => (/* binding */ coreAssistantMessageSchema),\n/* harmony export */   coreMessageSchema: () => (/* binding */ coreMessageSchema),\n/* harmony export */   coreSystemMessageSchema: () => (/* binding */ coreSystemMessageSchema),\n/* harmony export */   coreToolMessageSchema: () => (/* binding */ coreToolMessageSchema),\n/* harmony export */   coreUserMessageSchema: () => (/* binding */ coreUserMessageSchema),\n/* harmony export */   cosineSimilarity: () => (/* binding */ cosineSimilarity),\n/* harmony export */   createDataStream: () => (/* binding */ createDataStream),\n/* harmony export */   createDataStreamResponse: () => (/* binding */ createDataStreamResponse),\n/* harmony export */   createIdGenerator: () => (/* reexport safe */ _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator),\n/* harmony export */   createProviderRegistry: () => (/* binding */ createProviderRegistry),\n/* harmony export */   customProvider: () => (/* binding */ customProvider),\n/* harmony export */   defaultSettingsMiddleware: () => (/* binding */ defaultSettingsMiddleware),\n/* harmony export */   embed: () => (/* binding */ embed),\n/* harmony export */   embedMany: () => (/* binding */ embedMany),\n/* harmony export */   experimental_createMCPClient: () => (/* binding */ createMCPClient),\n/* harmony export */   experimental_createProviderRegistry: () => (/* binding */ experimental_createProviderRegistry),\n/* harmony export */   experimental_customProvider: () => (/* binding */ experimental_customProvider),\n/* harmony export */   experimental_generateImage: () => (/* binding */ generateImage),\n/* harmony export */   experimental_generateSpeech: () => (/* binding */ generateSpeech),\n/* harmony export */   experimental_transcribe: () => (/* binding */ transcribe),\n/* harmony export */   experimental_wrapLanguageModel: () => (/* binding */ experimental_wrapLanguageModel),\n/* harmony export */   extractReasoningMiddleware: () => (/* binding */ extractReasoningMiddleware),\n/* harmony export */   formatAssistantStreamPart: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart),\n/* harmony export */   formatDataStreamPart: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart),\n/* harmony export */   generateId: () => (/* reexport safe */ _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.generateId),\n/* harmony export */   generateObject: () => (/* binding */ generateObject),\n/* harmony export */   generateText: () => (/* binding */ generateText),\n/* harmony export */   jsonSchema: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.jsonSchema),\n/* harmony export */   parseAssistantStreamPart: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.parseAssistantStreamPart),\n/* harmony export */   parseDataStreamPart: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.parseDataStreamPart),\n/* harmony export */   pipeDataStreamToResponse: () => (/* binding */ pipeDataStreamToResponse),\n/* harmony export */   processDataStream: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.processDataStream),\n/* harmony export */   processTextStream: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.processTextStream),\n/* harmony export */   simulateReadableStream: () => (/* binding */ simulateReadableStream),\n/* harmony export */   simulateStreamingMiddleware: () => (/* binding */ simulateStreamingMiddleware),\n/* harmony export */   smoothStream: () => (/* binding */ smoothStream),\n/* harmony export */   streamObject: () => (/* binding */ streamObject),\n/* harmony export */   streamText: () => (/* binding */ streamText),\n/* harmony export */   tool: () => (/* binding */ tool),\n/* harmony export */   wrapLanguageModel: () => (/* binding */ wrapLanguageModel),\n/* harmony export */   zodSchema: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.zodSchema)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/ui-utils */ \"(rsc)/./node_modules/@ai-sdk/ui-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name17 in all)__defProp(target, name17, {\n        get: all[name17],\n        enumerable: true\n    });\n};\n// core/index.ts\n\n\n// core/data-stream/create-data-stream.ts\n\nfunction createDataStream({ execute, onError = ()=>\"An error occurred.\" }) {\n    let controller;\n    const ongoingStreamPromises = [];\n    const stream = new ReadableStream({\n        start (controllerArg) {\n            controller = controllerArg;\n        }\n    });\n    function safeEnqueue(data) {\n        try {\n            controller.enqueue(data);\n        } catch (error) {}\n    }\n    try {\n        const result = execute({\n            write (data) {\n                safeEnqueue(data);\n            },\n            writeData (data) {\n                safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"data\", [\n                    data\n                ]));\n            },\n            writeMessageAnnotation (annotation) {\n                safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"message_annotations\", [\n                    annotation\n                ]));\n            },\n            writeSource (source) {\n                safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"source\", source));\n            },\n            merge (streamArg) {\n                ongoingStreamPromises.push((async ()=>{\n                    const reader = streamArg.getReader();\n                    while(true){\n                        const { done, value } = await reader.read();\n                        if (done) break;\n                        safeEnqueue(value);\n                    }\n                })().catch((error)=>{\n                    safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"error\", onError(error)));\n                }));\n            },\n            onError\n        });\n        if (result) {\n            ongoingStreamPromises.push(result.catch((error)=>{\n                safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"error\", onError(error)));\n            }));\n        }\n    } catch (error) {\n        safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"error\", onError(error)));\n    }\n    const waitForStreams = new Promise(async (resolve)=>{\n        while(ongoingStreamPromises.length > 0){\n            await ongoingStreamPromises.shift();\n        }\n        resolve();\n    });\n    waitForStreams.finally(()=>{\n        try {\n            controller.close();\n        } catch (error) {}\n    });\n    return stream;\n}\n// core/util/prepare-response-headers.ts\nfunction prepareResponseHeaders(headers, { contentType, dataStreamVersion }) {\n    const responseHeaders = new Headers(headers != null ? headers : {});\n    if (!responseHeaders.has(\"Content-Type\")) {\n        responseHeaders.set(\"Content-Type\", contentType);\n    }\n    if (dataStreamVersion !== void 0) {\n        responseHeaders.set(\"X-Vercel-AI-Data-Stream\", dataStreamVersion);\n    }\n    return responseHeaders;\n}\n// core/data-stream/create-data-stream-response.ts\nfunction createDataStreamResponse({ status, statusText, headers, execute, onError }) {\n    return new Response(createDataStream({\n        execute,\n        onError\n    }).pipeThrough(new TextEncoderStream()), {\n        status,\n        statusText,\n        headers: prepareResponseHeaders(headers, {\n            contentType: \"text/plain; charset=utf-8\",\n            dataStreamVersion: \"v1\"\n        })\n    });\n}\n// core/util/prepare-outgoing-http-headers.ts\nfunction prepareOutgoingHttpHeaders(headers, { contentType, dataStreamVersion }) {\n    const outgoingHeaders = {};\n    if (headers != null) {\n        for (const [key, value] of Object.entries(headers)){\n            outgoingHeaders[key] = value;\n        }\n    }\n    if (outgoingHeaders[\"Content-Type\"] == null) {\n        outgoingHeaders[\"Content-Type\"] = contentType;\n    }\n    if (dataStreamVersion !== void 0) {\n        outgoingHeaders[\"X-Vercel-AI-Data-Stream\"] = dataStreamVersion;\n    }\n    return outgoingHeaders;\n}\n// core/util/write-to-server-response.ts\nfunction writeToServerResponse({ response, status, statusText, headers, stream }) {\n    response.writeHead(status != null ? status : 200, statusText, headers);\n    const reader = stream.getReader();\n    const read = async ()=>{\n        try {\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) break;\n                response.write(value);\n            }\n        } catch (error) {\n            throw error;\n        } finally{\n            response.end();\n        }\n    };\n    read();\n}\n// core/data-stream/pipe-data-stream-to-response.ts\nfunction pipeDataStreamToResponse(response, { status, statusText, headers, execute, onError }) {\n    writeToServerResponse({\n        response,\n        status,\n        statusText,\n        headers: prepareOutgoingHttpHeaders(headers, {\n            contentType: \"text/plain; charset=utf-8\",\n            dataStreamVersion: \"v1\"\n        }),\n        stream: createDataStream({\n            execute,\n            onError\n        }).pipeThrough(new TextEncoderStream())\n    });\n}\n// errors/invalid-argument-error.ts\n\nvar name = \"AI_InvalidArgumentError\";\nvar marker = `vercel.ai.error.${name}`;\nvar symbol = Symbol.for(marker);\nvar _a;\nvar InvalidArgumentError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ parameter, value, message }){\n        super({\n            name,\n            message: `Invalid argument for parameter ${parameter}: ${message}`\n        });\n        this[_a] = true;\n        this.parameter = parameter;\n        this.value = value;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker);\n    }\n};\n_a = symbol;\n// util/retry-with-exponential-backoff.ts\n\n\n// util/retry-error.ts\n\nvar name2 = \"AI_RetryError\";\nvar marker2 = `vercel.ai.error.${name2}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2;\nvar RetryError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ message, reason, errors }){\n        super({\n            name: name2,\n            message\n        });\n        this[_a2] = true;\n        this.reason = reason;\n        this.errors = errors;\n        this.lastError = errors[errors.length - 1];\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker2);\n    }\n};\n_a2 = symbol2;\n// util/retry-with-exponential-backoff.ts\nvar retryWithExponentialBackoff = ({ maxRetries = 2, initialDelayInMs = 2e3, backoffFactor = 2 } = {})=>async (f)=>_retryWithExponentialBackoff(f, {\n            maxRetries,\n            delayInMs: initialDelayInMs,\n            backoffFactor\n        });\nasync function _retryWithExponentialBackoff(f, { maxRetries, delayInMs, backoffFactor }, errors = []) {\n    try {\n        return await f();\n    } catch (error) {\n        if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.isAbortError)(error)) {\n            throw error;\n        }\n        if (maxRetries === 0) {\n            throw error;\n        }\n        const errorMessage = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.getErrorMessage)(error);\n        const newErrors = [\n            ...errors,\n            error\n        ];\n        const tryNumber = newErrors.length;\n        if (tryNumber > maxRetries) {\n            throw new RetryError({\n                message: `Failed after ${tryNumber} attempts. Last error: ${errorMessage}`,\n                reason: \"maxRetriesExceeded\",\n                errors: newErrors\n            });\n        }\n        if (error instanceof Error && _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error) && error.isRetryable === true && tryNumber <= maxRetries) {\n            await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.delay)(delayInMs);\n            return _retryWithExponentialBackoff(f, {\n                maxRetries,\n                delayInMs: backoffFactor * delayInMs,\n                backoffFactor\n            }, newErrors);\n        }\n        if (tryNumber === 1) {\n            throw error;\n        }\n        throw new RetryError({\n            message: `Failed after ${tryNumber} attempts with non-retryable error: '${errorMessage}'`,\n            reason: \"errorNotRetryable\",\n            errors: newErrors\n        });\n    }\n}\n// core/prompt/prepare-retries.ts\nfunction prepareRetries({ maxRetries }) {\n    if (maxRetries != null) {\n        if (!Number.isInteger(maxRetries)) {\n            throw new InvalidArgumentError({\n                parameter: \"maxRetries\",\n                value: maxRetries,\n                message: \"maxRetries must be an integer\"\n            });\n        }\n        if (maxRetries < 0) {\n            throw new InvalidArgumentError({\n                parameter: \"maxRetries\",\n                value: maxRetries,\n                message: \"maxRetries must be >= 0\"\n            });\n        }\n    }\n    const maxRetriesResult = maxRetries != null ? maxRetries : 2;\n    return {\n        maxRetries: maxRetriesResult,\n        retry: retryWithExponentialBackoff({\n            maxRetries: maxRetriesResult\n        })\n    };\n}\n// core/telemetry/assemble-operation-name.ts\nfunction assembleOperationName({ operationId, telemetry }) {\n    return {\n        // standardized operation and resource name:\n        \"operation.name\": `${operationId}${(telemetry == null ? void 0 : telemetry.functionId) != null ? ` ${telemetry.functionId}` : \"\"}`,\n        \"resource.name\": telemetry == null ? void 0 : telemetry.functionId,\n        // detailed, AI SDK specific data:\n        \"ai.operationId\": operationId,\n        \"ai.telemetry.functionId\": telemetry == null ? void 0 : telemetry.functionId\n    };\n}\n// core/telemetry/get-base-telemetry-attributes.ts\nfunction getBaseTelemetryAttributes({ model, settings, telemetry, headers }) {\n    var _a17;\n    return {\n        \"ai.model.provider\": model.provider,\n        \"ai.model.id\": model.modelId,\n        // settings:\n        ...Object.entries(settings).reduce((attributes, [key, value])=>{\n            attributes[`ai.settings.${key}`] = value;\n            return attributes;\n        }, {}),\n        // add metadata as attributes:\n        ...Object.entries((_a17 = telemetry == null ? void 0 : telemetry.metadata) != null ? _a17 : {}).reduce((attributes, [key, value])=>{\n            attributes[`ai.telemetry.metadata.${key}`] = value;\n            return attributes;\n        }, {}),\n        // request headers\n        ...Object.entries(headers != null ? headers : {}).reduce((attributes, [key, value])=>{\n            if (value !== void 0) {\n                attributes[`ai.request.headers.${key}`] = value;\n            }\n            return attributes;\n        }, {})\n    };\n}\n// core/telemetry/get-tracer.ts\n\n// core/telemetry/noop-tracer.ts\nvar noopTracer = {\n    startSpan () {\n        return noopSpan;\n    },\n    startActiveSpan (name17, arg1, arg2, arg3) {\n        if (typeof arg1 === \"function\") {\n            return arg1(noopSpan);\n        }\n        if (typeof arg2 === \"function\") {\n            return arg2(noopSpan);\n        }\n        if (typeof arg3 === \"function\") {\n            return arg3(noopSpan);\n        }\n    }\n};\nvar noopSpan = {\n    spanContext () {\n        return noopSpanContext;\n    },\n    setAttribute () {\n        return this;\n    },\n    setAttributes () {\n        return this;\n    },\n    addEvent () {\n        return this;\n    },\n    addLink () {\n        return this;\n    },\n    addLinks () {\n        return this;\n    },\n    setStatus () {\n        return this;\n    },\n    updateName () {\n        return this;\n    },\n    end () {\n        return this;\n    },\n    isRecording () {\n        return false;\n    },\n    recordException () {\n        return this;\n    }\n};\nvar noopSpanContext = {\n    traceId: \"\",\n    spanId: \"\",\n    traceFlags: 0\n};\n// core/telemetry/get-tracer.ts\nfunction getTracer({ isEnabled = false, tracer } = {}) {\n    if (!isEnabled) {\n        return noopTracer;\n    }\n    if (tracer) {\n        return tracer;\n    }\n    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getTracer(\"ai\");\n}\n// core/telemetry/record-span.ts\n\nfunction recordSpan({ name: name17, tracer, attributes, fn, endWhenDone = true }) {\n    return tracer.startActiveSpan(name17, {\n        attributes\n    }, async (span)=>{\n        try {\n            const result = await fn(span);\n            if (endWhenDone) {\n                span.end();\n            }\n            return result;\n        } catch (error) {\n            try {\n                if (error instanceof Error) {\n                    span.recordException({\n                        name: error.name,\n                        message: error.message,\n                        stack: error.stack\n                    });\n                    span.setStatus({\n                        code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.SpanStatusCode.ERROR,\n                        message: error.message\n                    });\n                } else {\n                    span.setStatus({\n                        code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.SpanStatusCode.ERROR\n                    });\n                }\n            } finally{\n                span.end();\n            }\n            throw error;\n        }\n    });\n}\n// core/telemetry/select-telemetry-attributes.ts\nfunction selectTelemetryAttributes({ telemetry, attributes }) {\n    if ((telemetry == null ? void 0 : telemetry.isEnabled) !== true) {\n        return {};\n    }\n    return Object.entries(attributes).reduce((attributes2, [key, value])=>{\n        if (value === void 0) {\n            return attributes2;\n        }\n        if (typeof value === \"object\" && \"input\" in value && typeof value.input === \"function\") {\n            if ((telemetry == null ? void 0 : telemetry.recordInputs) === false) {\n                return attributes2;\n            }\n            const result = value.input();\n            return result === void 0 ? attributes2 : {\n                ...attributes2,\n                [key]: result\n            };\n        }\n        if (typeof value === \"object\" && \"output\" in value && typeof value.output === \"function\") {\n            if ((telemetry == null ? void 0 : telemetry.recordOutputs) === false) {\n                return attributes2;\n            }\n            const result = value.output();\n            return result === void 0 ? attributes2 : {\n                ...attributes2,\n                [key]: result\n            };\n        }\n        return {\n            ...attributes2,\n            [key]: value\n        };\n    }, {});\n}\n// core/embed/embed.ts\nasync function embed({ model, value, maxRetries: maxRetriesArg, abortSignal, headers, experimental_telemetry: telemetry }) {\n    const { maxRetries, retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.embed\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.embed\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                \"ai.value\": {\n                    input: ()=>JSON.stringify(value)\n                }\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            const { embedding, usage, rawResponse } = await retry(()=>// nested spans to align with the embedMany telemetry data:\n                recordSpan({\n                    name: \"ai.embed.doEmbed\",\n                    attributes: selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                            ...assembleOperationName({\n                                operationId: \"ai.embed.doEmbed\",\n                                telemetry\n                            }),\n                            ...baseTelemetryAttributes,\n                            // specific settings that only make sense on the outer level:\n                            \"ai.values\": {\n                                input: ()=>[\n                                        JSON.stringify(value)\n                                    ]\n                            }\n                        }\n                    }),\n                    tracer,\n                    fn: async (doEmbedSpan)=>{\n                        var _a17;\n                        const modelResponse = await model.doEmbed({\n                            values: [\n                                value\n                            ],\n                            abortSignal,\n                            headers\n                        });\n                        const embedding2 = modelResponse.embeddings[0];\n                        const usage2 = (_a17 = modelResponse.usage) != null ? _a17 : {\n                            tokens: NaN\n                        };\n                        doEmbedSpan.setAttributes(selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                \"ai.embeddings\": {\n                                    output: ()=>modelResponse.embeddings.map((embedding3)=>JSON.stringify(embedding3))\n                                },\n                                \"ai.usage.tokens\": usage2.tokens\n                            }\n                        }));\n                        return {\n                            embedding: embedding2,\n                            usage: usage2,\n                            rawResponse: modelResponse.rawResponse\n                        };\n                    }\n                }));\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.embedding\": {\n                        output: ()=>JSON.stringify(embedding)\n                    },\n                    \"ai.usage.tokens\": usage.tokens\n                }\n            }));\n            return new DefaultEmbedResult({\n                value,\n                embedding,\n                usage,\n                rawResponse\n            });\n        }\n    });\n}\nvar DefaultEmbedResult = class {\n    constructor(options){\n        this.value = options.value;\n        this.embedding = options.embedding;\n        this.usage = options.usage;\n        this.rawResponse = options.rawResponse;\n    }\n};\n// core/util/split-array.ts\nfunction splitArray(array, chunkSize) {\n    if (chunkSize <= 0) {\n        throw new Error(\"chunkSize must be greater than 0\");\n    }\n    const result = [];\n    for(let i = 0; i < array.length; i += chunkSize){\n        result.push(array.slice(i, i + chunkSize));\n    }\n    return result;\n}\n// core/embed/embed-many.ts\nasync function embedMany({ model, values, maxRetries: maxRetriesArg, abortSignal, headers, experimental_telemetry: telemetry }) {\n    const { maxRetries, retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.embedMany\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.embedMany\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.values\": {\n                    input: ()=>values.map((value)=>JSON.stringify(value))\n                }\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            const maxEmbeddingsPerCall = model.maxEmbeddingsPerCall;\n            if (maxEmbeddingsPerCall == null) {\n                const { embeddings: embeddings2, usage } = await retry(()=>{\n                    return recordSpan({\n                        name: \"ai.embedMany.doEmbed\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.embedMany.doEmbed\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                // specific settings that only make sense on the outer level:\n                                \"ai.values\": {\n                                    input: ()=>values.map((value)=>JSON.stringify(value))\n                                }\n                            }\n                        }),\n                        tracer,\n                        fn: async (doEmbedSpan)=>{\n                            var _a17;\n                            const modelResponse = await model.doEmbed({\n                                values,\n                                abortSignal,\n                                headers\n                            });\n                            const embeddings3 = modelResponse.embeddings;\n                            const usage2 = (_a17 = modelResponse.usage) != null ? _a17 : {\n                                tokens: NaN\n                            };\n                            doEmbedSpan.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.embeddings\": {\n                                        output: ()=>embeddings3.map((embedding)=>JSON.stringify(embedding))\n                                    },\n                                    \"ai.usage.tokens\": usage2.tokens\n                                }\n                            }));\n                            return {\n                                embeddings: embeddings3,\n                                usage: usage2\n                            };\n                        }\n                    });\n                });\n                span.setAttributes(selectTelemetryAttributes({\n                    telemetry,\n                    attributes: {\n                        \"ai.embeddings\": {\n                            output: ()=>embeddings2.map((embedding)=>JSON.stringify(embedding))\n                        },\n                        \"ai.usage.tokens\": usage.tokens\n                    }\n                }));\n                return new DefaultEmbedManyResult({\n                    values,\n                    embeddings: embeddings2,\n                    usage\n                });\n            }\n            const valueChunks = splitArray(values, maxEmbeddingsPerCall);\n            const embeddings = [];\n            let tokens = 0;\n            for (const chunk of valueChunks){\n                const { embeddings: responseEmbeddings, usage } = await retry(()=>{\n                    return recordSpan({\n                        name: \"ai.embedMany.doEmbed\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.embedMany.doEmbed\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                // specific settings that only make sense on the outer level:\n                                \"ai.values\": {\n                                    input: ()=>chunk.map((value)=>JSON.stringify(value))\n                                }\n                            }\n                        }),\n                        tracer,\n                        fn: async (doEmbedSpan)=>{\n                            var _a17;\n                            const modelResponse = await model.doEmbed({\n                                values: chunk,\n                                abortSignal,\n                                headers\n                            });\n                            const embeddings2 = modelResponse.embeddings;\n                            const usage2 = (_a17 = modelResponse.usage) != null ? _a17 : {\n                                tokens: NaN\n                            };\n                            doEmbedSpan.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.embeddings\": {\n                                        output: ()=>embeddings2.map((embedding)=>JSON.stringify(embedding))\n                                    },\n                                    \"ai.usage.tokens\": usage2.tokens\n                                }\n                            }));\n                            return {\n                                embeddings: embeddings2,\n                                usage: usage2\n                            };\n                        }\n                    });\n                });\n                embeddings.push(...responseEmbeddings);\n                tokens += usage.tokens;\n            }\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.embeddings\": {\n                        output: ()=>embeddings.map((embedding)=>JSON.stringify(embedding))\n                    },\n                    \"ai.usage.tokens\": tokens\n                }\n            }));\n            return new DefaultEmbedManyResult({\n                values,\n                embeddings,\n                usage: {\n                    tokens\n                }\n            });\n        }\n    });\n}\nvar DefaultEmbedManyResult = class {\n    constructor(options){\n        this.values = options.values;\n        this.embeddings = options.embeddings;\n        this.usage = options.usage;\n    }\n};\n// errors/no-image-generated-error.ts\n\nvar name3 = \"AI_NoImageGeneratedError\";\nvar marker3 = `vercel.ai.error.${name3}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3;\nvar NoImageGeneratedError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ message = \"No image generated.\", cause, responses }){\n        super({\n            name: name3,\n            message,\n            cause\n        });\n        this[_a3] = true;\n        this.responses = responses;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker3);\n    }\n};\n_a3 = symbol3;\n// core/generate-text/generated-file.ts\n\nvar DefaultGeneratedFile = class {\n    constructor({ data, mimeType }){\n        const isUint8Array = data instanceof Uint8Array;\n        this.base64Data = isUint8Array ? void 0 : data;\n        this.uint8ArrayData = isUint8Array ? data : void 0;\n        this.mimeType = mimeType;\n    }\n    // lazy conversion with caching to avoid unnecessary conversion overhead:\n    get base64() {\n        if (this.base64Data == null) {\n            this.base64Data = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertUint8ArrayToBase64)(this.uint8ArrayData);\n        }\n        return this.base64Data;\n    }\n    // lazy conversion with caching to avoid unnecessary conversion overhead:\n    get uint8Array() {\n        if (this.uint8ArrayData == null) {\n            this.uint8ArrayData = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertBase64ToUint8Array)(this.base64Data);\n        }\n        return this.uint8ArrayData;\n    }\n};\nvar DefaultGeneratedFileWithType = class extends DefaultGeneratedFile {\n    constructor(options){\n        super(options);\n        this.type = \"file\";\n    }\n};\n// core/util/detect-mimetype.ts\n\nvar imageMimeTypeSignatures = [\n    {\n        mimeType: \"image/gif\",\n        bytesPrefix: [\n            71,\n            73,\n            70\n        ],\n        base64Prefix: \"R0lG\"\n    },\n    {\n        mimeType: \"image/png\",\n        bytesPrefix: [\n            137,\n            80,\n            78,\n            71\n        ],\n        base64Prefix: \"iVBORw\"\n    },\n    {\n        mimeType: \"image/jpeg\",\n        bytesPrefix: [\n            255,\n            216\n        ],\n        base64Prefix: \"/9j/\"\n    },\n    {\n        mimeType: \"image/webp\",\n        bytesPrefix: [\n            82,\n            73,\n            70,\n            70\n        ],\n        base64Prefix: \"UklGRg\"\n    },\n    {\n        mimeType: \"image/bmp\",\n        bytesPrefix: [\n            66,\n            77\n        ],\n        base64Prefix: \"Qk\"\n    },\n    {\n        mimeType: \"image/tiff\",\n        bytesPrefix: [\n            73,\n            73,\n            42,\n            0\n        ],\n        base64Prefix: \"SUkqAA\"\n    },\n    {\n        mimeType: \"image/tiff\",\n        bytesPrefix: [\n            77,\n            77,\n            0,\n            42\n        ],\n        base64Prefix: \"TU0AKg\"\n    },\n    {\n        mimeType: \"image/avif\",\n        bytesPrefix: [\n            0,\n            0,\n            0,\n            32,\n            102,\n            116,\n            121,\n            112,\n            97,\n            118,\n            105,\n            102\n        ],\n        base64Prefix: \"AAAAIGZ0eXBhdmlm\"\n    },\n    {\n        mimeType: \"image/heic\",\n        bytesPrefix: [\n            0,\n            0,\n            0,\n            32,\n            102,\n            116,\n            121,\n            112,\n            104,\n            101,\n            105,\n            99\n        ],\n        base64Prefix: \"AAAAIGZ0eXBoZWlj\"\n    }\n];\nvar audioMimeTypeSignatures = [\n    {\n        mimeType: \"audio/mpeg\",\n        bytesPrefix: [\n            255,\n            251\n        ],\n        base64Prefix: \"//s=\"\n    },\n    {\n        mimeType: \"audio/wav\",\n        bytesPrefix: [\n            82,\n            73,\n            70,\n            70\n        ],\n        base64Prefix: \"UklGR\"\n    },\n    {\n        mimeType: \"audio/ogg\",\n        bytesPrefix: [\n            79,\n            103,\n            103,\n            83\n        ],\n        base64Prefix: \"T2dnUw\"\n    },\n    {\n        mimeType: \"audio/flac\",\n        bytesPrefix: [\n            102,\n            76,\n            97,\n            67\n        ],\n        base64Prefix: \"ZkxhQw\"\n    },\n    {\n        mimeType: \"audio/aac\",\n        bytesPrefix: [\n            64,\n            21,\n            0,\n            0\n        ],\n        base64Prefix: \"QBUA\"\n    },\n    {\n        mimeType: \"audio/mp4\",\n        bytesPrefix: [\n            102,\n            116,\n            121,\n            112\n        ],\n        base64Prefix: \"ZnR5cA\"\n    }\n];\nvar stripID3 = (data)=>{\n    const bytes = typeof data === \"string\" ? (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertBase64ToUint8Array)(data) : data;\n    const id3Size = (bytes[6] & 127) << 21 | (bytes[7] & 127) << 14 | (bytes[8] & 127) << 7 | bytes[9] & 127;\n    return bytes.slice(id3Size + 10);\n};\nfunction stripID3TagsIfPresent(data) {\n    const hasId3 = typeof data === \"string\" && data.startsWith(\"SUQz\") || typeof data !== \"string\" && data.length > 10 && data[0] === 73 && // 'I'\n    data[1] === 68 && // 'D'\n    data[2] === 51;\n    return hasId3 ? stripID3(data) : data;\n}\nfunction detectMimeType({ data, signatures }) {\n    const processedData = stripID3TagsIfPresent(data);\n    for (const signature of signatures){\n        if (typeof processedData === \"string\" ? processedData.startsWith(signature.base64Prefix) : processedData.length >= signature.bytesPrefix.length && signature.bytesPrefix.every((byte, index)=>processedData[index] === byte)) {\n            return signature.mimeType;\n        }\n    }\n    return void 0;\n}\n// core/generate-image/generate-image.ts\nasync function generateImage({ model, prompt, n = 1, size, aspectRatio, seed, providerOptions, maxRetries: maxRetriesArg, abortSignal, headers }) {\n    var _a17;\n    const { retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const maxImagesPerCall = (_a17 = model.maxImagesPerCall) != null ? _a17 : 1;\n    const callCount = Math.ceil(n / maxImagesPerCall);\n    const callImageCounts = Array.from({\n        length: callCount\n    }, (_, i)=>{\n        if (i < callCount - 1) {\n            return maxImagesPerCall;\n        }\n        const remainder = n % maxImagesPerCall;\n        return remainder === 0 ? maxImagesPerCall : remainder;\n    });\n    const results = await Promise.all(callImageCounts.map(async (callImageCount)=>retry(()=>model.doGenerate({\n                prompt,\n                n: callImageCount,\n                abortSignal,\n                headers,\n                size,\n                aspectRatio,\n                seed,\n                providerOptions: providerOptions != null ? providerOptions : {}\n            }))));\n    const images = [];\n    const warnings = [];\n    const responses = [];\n    for (const result of results){\n        images.push(...result.images.map((image)=>{\n            var _a18;\n            return new DefaultGeneratedFile({\n                data: image,\n                mimeType: (_a18 = detectMimeType({\n                    data: image,\n                    signatures: imageMimeTypeSignatures\n                })) != null ? _a18 : \"image/png\"\n            });\n        }));\n        warnings.push(...result.warnings);\n        responses.push(result.response);\n    }\n    if (!images.length) {\n        throw new NoImageGeneratedError({\n            responses\n        });\n    }\n    return new DefaultGenerateImageResult({\n        images,\n        warnings,\n        responses\n    });\n}\nvar DefaultGenerateImageResult = class {\n    constructor(options){\n        this.images = options.images;\n        this.warnings = options.warnings;\n        this.responses = options.responses;\n    }\n    get image() {\n        return this.images[0];\n    }\n};\n// core/generate-object/generate-object.ts\n\n\n// errors/no-object-generated-error.ts\n\nvar name4 = \"AI_NoObjectGeneratedError\";\nvar marker4 = `vercel.ai.error.${name4}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4;\nvar NoObjectGeneratedError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ message = \"No object generated.\", cause, text: text2, response, usage, finishReason }){\n        super({\n            name: name4,\n            message,\n            cause\n        });\n        this[_a4] = true;\n        this.text = text2;\n        this.response = response;\n        this.usage = usage;\n        this.finishReason = finishReason;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker4);\n    }\n};\n_a4 = symbol4;\n// util/download-error.ts\n\nvar name5 = \"AI_DownloadError\";\nvar marker5 = `vercel.ai.error.${name5}`;\nvar symbol5 = Symbol.for(marker5);\nvar _a5;\nvar DownloadError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ url, statusCode, statusText, cause, message = cause == null ? `Failed to download ${url}: ${statusCode} ${statusText}` : `Failed to download ${url}: ${cause}` }){\n        super({\n            name: name5,\n            message,\n            cause\n        });\n        this[_a5] = true;\n        this.url = url;\n        this.statusCode = statusCode;\n        this.statusText = statusText;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker5);\n    }\n};\n_a5 = symbol5;\n// util/download.ts\nasync function download({ url }) {\n    var _a17;\n    const urlText = url.toString();\n    try {\n        const response = await fetch(urlText);\n        if (!response.ok) {\n            throw new DownloadError({\n                url: urlText,\n                statusCode: response.status,\n                statusText: response.statusText\n            });\n        }\n        return {\n            data: new Uint8Array(await response.arrayBuffer()),\n            mimeType: (_a17 = response.headers.get(\"content-type\")) != null ? _a17 : void 0\n        };\n    } catch (error) {\n        if (DownloadError.isInstance(error)) {\n            throw error;\n        }\n        throw new DownloadError({\n            url: urlText,\n            cause: error\n        });\n    }\n}\n// core/prompt/data-content.ts\n\n// core/prompt/invalid-data-content-error.ts\n\nvar name6 = \"AI_InvalidDataContentError\";\nvar marker6 = `vercel.ai.error.${name6}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6;\nvar InvalidDataContentError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ content, cause, message = `Invalid data content. Expected a base64 string, Uint8Array, ArrayBuffer, or Buffer, but got ${typeof content}.` }){\n        super({\n            name: name6,\n            message,\n            cause\n        });\n        this[_a6] = true;\n        this.content = content;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker6);\n    }\n};\n_a6 = symbol6;\n// core/prompt/data-content.ts\n\nvar dataContentSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.instanceof(Uint8Array),\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.instanceof(ArrayBuffer),\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.custom(// Buffer might not be available in some environments such as CloudFlare:\n    (value)=>{\n        var _a17, _b;\n        return (_b = (_a17 = globalThis.Buffer) == null ? void 0 : _a17.isBuffer(value)) != null ? _b : false;\n    }, {\n        message: \"Must be a Buffer\"\n    })\n]);\nfunction convertDataContentToBase64String(content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    if (content instanceof ArrayBuffer) {\n        return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertUint8ArrayToBase64)(new Uint8Array(content));\n    }\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertUint8ArrayToBase64)(content);\n}\nfunction convertDataContentToUint8Array(content) {\n    if (content instanceof Uint8Array) {\n        return content;\n    }\n    if (typeof content === \"string\") {\n        try {\n            return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertBase64ToUint8Array)(content);\n        } catch (error) {\n            throw new InvalidDataContentError({\n                message: \"Invalid data content. Content string is not a base64-encoded media.\",\n                content,\n                cause: error\n            });\n        }\n    }\n    if (content instanceof ArrayBuffer) {\n        return new Uint8Array(content);\n    }\n    throw new InvalidDataContentError({\n        content\n    });\n}\nfunction convertUint8ArrayToText(uint8Array) {\n    try {\n        return new TextDecoder().decode(uint8Array);\n    } catch (error) {\n        throw new Error(\"Error decoding Uint8Array to text\");\n    }\n}\n// core/prompt/invalid-message-role-error.ts\n\nvar name7 = \"AI_InvalidMessageRoleError\";\nvar marker7 = `vercel.ai.error.${name7}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7;\nvar InvalidMessageRoleError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ role, message = `Invalid message role: '${role}'. Must be one of: \"system\", \"user\", \"assistant\", \"tool\".` }){\n        super({\n            name: name7,\n            message\n        });\n        this[_a7] = true;\n        this.role = role;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker7);\n    }\n};\n_a7 = symbol7;\n// core/prompt/split-data-url.ts\nfunction splitDataUrl(dataUrl) {\n    try {\n        const [header, base64Content] = dataUrl.split(\",\");\n        return {\n            mimeType: header.split(\";\")[0].split(\":\")[1],\n            base64Content\n        };\n    } catch (error) {\n        return {\n            mimeType: void 0,\n            base64Content: void 0\n        };\n    }\n}\n// core/prompt/convert-to-language-model-prompt.ts\nasync function convertToLanguageModelPrompt({ prompt, modelSupportsImageUrls = true, modelSupportsUrl = ()=>false, downloadImplementation = download }) {\n    const downloadedAssets = await downloadAssets(prompt.messages, downloadImplementation, modelSupportsImageUrls, modelSupportsUrl);\n    return [\n        ...prompt.system != null ? [\n            {\n                role: \"system\",\n                content: prompt.system\n            }\n        ] : [],\n        ...prompt.messages.map((message)=>convertToLanguageModelMessage(message, downloadedAssets))\n    ];\n}\nfunction convertToLanguageModelMessage(message, downloadedAssets) {\n    var _a17, _b, _c, _d, _e, _f;\n    const role = message.role;\n    switch(role){\n        case \"system\":\n            {\n                return {\n                    role: \"system\",\n                    content: message.content,\n                    providerMetadata: (_a17 = message.providerOptions) != null ? _a17 : message.experimental_providerMetadata\n                };\n            }\n        case \"user\":\n            {\n                if (typeof message.content === \"string\") {\n                    return {\n                        role: \"user\",\n                        content: [\n                            {\n                                type: \"text\",\n                                text: message.content\n                            }\n                        ],\n                        providerMetadata: (_b = message.providerOptions) != null ? _b : message.experimental_providerMetadata\n                    };\n                }\n                return {\n                    role: \"user\",\n                    content: message.content.map((part)=>convertPartToLanguageModelPart(part, downloadedAssets)).filter((part)=>part.type !== \"text\" || part.text !== \"\"),\n                    providerMetadata: (_c = message.providerOptions) != null ? _c : message.experimental_providerMetadata\n                };\n            }\n        case \"assistant\":\n            {\n                if (typeof message.content === \"string\") {\n                    return {\n                        role: \"assistant\",\n                        content: [\n                            {\n                                type: \"text\",\n                                text: message.content\n                            }\n                        ],\n                        providerMetadata: (_d = message.providerOptions) != null ? _d : message.experimental_providerMetadata\n                    };\n                }\n                return {\n                    role: \"assistant\",\n                    content: message.content.filter(// remove empty text parts:\n                    (part)=>part.type !== \"text\" || part.text !== \"\").map((part)=>{\n                        var _a18;\n                        const providerOptions = (_a18 = part.providerOptions) != null ? _a18 : part.experimental_providerMetadata;\n                        switch(part.type){\n                            case \"file\":\n                                {\n                                    return {\n                                        type: \"file\",\n                                        data: part.data instanceof URL ? part.data : convertDataContentToBase64String(part.data),\n                                        filename: part.filename,\n                                        mimeType: part.mimeType,\n                                        providerMetadata: providerOptions\n                                    };\n                                }\n                            case \"reasoning\":\n                                {\n                                    return {\n                                        type: \"reasoning\",\n                                        text: part.text,\n                                        signature: part.signature,\n                                        providerMetadata: providerOptions\n                                    };\n                                }\n                            case \"redacted-reasoning\":\n                                {\n                                    return {\n                                        type: \"redacted-reasoning\",\n                                        data: part.data,\n                                        providerMetadata: providerOptions\n                                    };\n                                }\n                            case \"text\":\n                                {\n                                    return {\n                                        type: \"text\",\n                                        text: part.text,\n                                        providerMetadata: providerOptions\n                                    };\n                                }\n                            case \"tool-call\":\n                                {\n                                    return {\n                                        type: \"tool-call\",\n                                        toolCallId: part.toolCallId,\n                                        toolName: part.toolName,\n                                        args: part.args,\n                                        providerMetadata: providerOptions\n                                    };\n                                }\n                        }\n                    }),\n                    providerMetadata: (_e = message.providerOptions) != null ? _e : message.experimental_providerMetadata\n                };\n            }\n        case \"tool\":\n            {\n                return {\n                    role: \"tool\",\n                    content: message.content.map((part)=>{\n                        var _a18;\n                        return {\n                            type: \"tool-result\",\n                            toolCallId: part.toolCallId,\n                            toolName: part.toolName,\n                            result: part.result,\n                            content: part.experimental_content,\n                            isError: part.isError,\n                            providerMetadata: (_a18 = part.providerOptions) != null ? _a18 : part.experimental_providerMetadata\n                        };\n                    }),\n                    providerMetadata: (_f = message.providerOptions) != null ? _f : message.experimental_providerMetadata\n                };\n            }\n        default:\n            {\n                const _exhaustiveCheck = role;\n                throw new InvalidMessageRoleError({\n                    role: _exhaustiveCheck\n                });\n            }\n    }\n}\nasync function downloadAssets(messages, downloadImplementation, modelSupportsImageUrls, modelSupportsUrl) {\n    const urls = messages.filter((message)=>message.role === \"user\").map((message)=>message.content).filter((content)=>Array.isArray(content)).flat().filter((part)=>part.type === \"image\" || part.type === \"file\").filter((part)=>!(part.type === \"image\" && modelSupportsImageUrls === true)).map((part)=>part.type === \"image\" ? part.image : part.data).map((part)=>// support string urls:\n        typeof part === \"string\" && (part.startsWith(\"http:\") || part.startsWith(\"https:\")) ? new URL(part) : part).filter((image)=>image instanceof URL).filter((url)=>!modelSupportsUrl(url));\n    const downloadedImages = await Promise.all(urls.map(async (url)=>({\n            url,\n            data: await downloadImplementation({\n                url\n            })\n        })));\n    return Object.fromEntries(downloadedImages.map(({ url, data })=>[\n            url.toString(),\n            data\n        ]));\n}\nfunction convertPartToLanguageModelPart(part, downloadedAssets) {\n    var _a17, _b, _c, _d;\n    if (part.type === \"text\") {\n        return {\n            type: \"text\",\n            text: part.text,\n            providerMetadata: (_a17 = part.providerOptions) != null ? _a17 : part.experimental_providerMetadata\n        };\n    }\n    let mimeType = part.mimeType;\n    let data;\n    let content;\n    let normalizedData;\n    const type = part.type;\n    switch(type){\n        case \"image\":\n            data = part.image;\n            break;\n        case \"file\":\n            data = part.data;\n            break;\n        default:\n            throw new Error(`Unsupported part type: ${type}`);\n    }\n    try {\n        content = typeof data === \"string\" ? new URL(data) : data;\n    } catch (error) {\n        content = data;\n    }\n    if (content instanceof URL) {\n        if (content.protocol === \"data:\") {\n            const { mimeType: dataUrlMimeType, base64Content } = splitDataUrl(content.toString());\n            if (dataUrlMimeType == null || base64Content == null) {\n                throw new Error(`Invalid data URL format in part ${type}`);\n            }\n            mimeType = dataUrlMimeType;\n            normalizedData = convertDataContentToUint8Array(base64Content);\n        } else {\n            const downloadedFile = downloadedAssets[content.toString()];\n            if (downloadedFile) {\n                normalizedData = downloadedFile.data;\n                mimeType != null ? mimeType : mimeType = downloadedFile.mimeType;\n            } else {\n                normalizedData = content;\n            }\n        }\n    } else {\n        normalizedData = convertDataContentToUint8Array(content);\n    }\n    switch(type){\n        case \"image\":\n            {\n                if (normalizedData instanceof Uint8Array) {\n                    mimeType = (_b = detectMimeType({\n                        data: normalizedData,\n                        signatures: imageMimeTypeSignatures\n                    })) != null ? _b : mimeType;\n                }\n                return {\n                    type: \"image\",\n                    image: normalizedData,\n                    mimeType,\n                    providerMetadata: (_c = part.providerOptions) != null ? _c : part.experimental_providerMetadata\n                };\n            }\n        case \"file\":\n            {\n                if (mimeType == null) {\n                    throw new Error(`Mime type is missing for file part`);\n                }\n                return {\n                    type: \"file\",\n                    data: normalizedData instanceof Uint8Array ? convertDataContentToBase64String(normalizedData) : normalizedData,\n                    filename: part.filename,\n                    mimeType,\n                    providerMetadata: (_d = part.providerOptions) != null ? _d : part.experimental_providerMetadata\n                };\n            }\n    }\n}\n// core/prompt/prepare-call-settings.ts\nfunction prepareCallSettings({ maxTokens, temperature, topP, topK, presencePenalty, frequencyPenalty, stopSequences, seed }) {\n    if (maxTokens != null) {\n        if (!Number.isInteger(maxTokens)) {\n            throw new InvalidArgumentError({\n                parameter: \"maxTokens\",\n                value: maxTokens,\n                message: \"maxTokens must be an integer\"\n            });\n        }\n        if (maxTokens < 1) {\n            throw new InvalidArgumentError({\n                parameter: \"maxTokens\",\n                value: maxTokens,\n                message: \"maxTokens must be >= 1\"\n            });\n        }\n    }\n    if (temperature != null) {\n        if (typeof temperature !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"temperature\",\n                value: temperature,\n                message: \"temperature must be a number\"\n            });\n        }\n    }\n    if (topP != null) {\n        if (typeof topP !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"topP\",\n                value: topP,\n                message: \"topP must be a number\"\n            });\n        }\n    }\n    if (topK != null) {\n        if (typeof topK !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"topK\",\n                value: topK,\n                message: \"topK must be a number\"\n            });\n        }\n    }\n    if (presencePenalty != null) {\n        if (typeof presencePenalty !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"presencePenalty\",\n                value: presencePenalty,\n                message: \"presencePenalty must be a number\"\n            });\n        }\n    }\n    if (frequencyPenalty != null) {\n        if (typeof frequencyPenalty !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"frequencyPenalty\",\n                value: frequencyPenalty,\n                message: \"frequencyPenalty must be a number\"\n            });\n        }\n    }\n    if (seed != null) {\n        if (!Number.isInteger(seed)) {\n            throw new InvalidArgumentError({\n                parameter: \"seed\",\n                value: seed,\n                message: \"seed must be an integer\"\n            });\n        }\n    }\n    return {\n        maxTokens,\n        // TODO v5 remove default 0 for temperature\n        temperature: temperature != null ? temperature : 0,\n        topP,\n        topK,\n        presencePenalty,\n        frequencyPenalty,\n        stopSequences: stopSequences != null && stopSequences.length > 0 ? stopSequences : void 0,\n        seed\n    };\n}\n// core/prompt/standardize-prompt.ts\n\n\n\n// core/prompt/attachments-to-parts.ts\nfunction attachmentsToParts(attachments) {\n    var _a17, _b, _c;\n    const parts = [];\n    for (const attachment of attachments){\n        let url;\n        try {\n            url = new URL(attachment.url);\n        } catch (error) {\n            throw new Error(`Invalid URL: ${attachment.url}`);\n        }\n        switch(url.protocol){\n            case \"http:\":\n            case \"https:\":\n                {\n                    if ((_a17 = attachment.contentType) == null ? void 0 : _a17.startsWith(\"image/\")) {\n                        parts.push({\n                            type: \"image\",\n                            image: url\n                        });\n                    } else {\n                        if (!attachment.contentType) {\n                            throw new Error(\"If the attachment is not an image, it must specify a content type\");\n                        }\n                        parts.push({\n                            type: \"file\",\n                            data: url,\n                            mimeType: attachment.contentType\n                        });\n                    }\n                    break;\n                }\n            case \"data:\":\n                {\n                    let header;\n                    let base64Content;\n                    let mimeType;\n                    try {\n                        [header, base64Content] = attachment.url.split(\",\");\n                        mimeType = header.split(\";\")[0].split(\":\")[1];\n                    } catch (error) {\n                        throw new Error(`Error processing data URL: ${attachment.url}`);\n                    }\n                    if (mimeType == null || base64Content == null) {\n                        throw new Error(`Invalid data URL format: ${attachment.url}`);\n                    }\n                    if ((_b = attachment.contentType) == null ? void 0 : _b.startsWith(\"image/\")) {\n                        parts.push({\n                            type: \"image\",\n                            image: convertDataContentToUint8Array(base64Content)\n                        });\n                    } else if ((_c = attachment.contentType) == null ? void 0 : _c.startsWith(\"text/\")) {\n                        parts.push({\n                            type: \"text\",\n                            text: convertUint8ArrayToText(convertDataContentToUint8Array(base64Content))\n                        });\n                    } else {\n                        if (!attachment.contentType) {\n                            throw new Error(\"If the attachment is not an image or text, it must specify a content type\");\n                        }\n                        parts.push({\n                            type: \"file\",\n                            data: base64Content,\n                            mimeType: attachment.contentType\n                        });\n                    }\n                    break;\n                }\n            default:\n                {\n                    throw new Error(`Unsupported URL protocol: ${url.protocol}`);\n                }\n        }\n    }\n    return parts;\n}\n// core/prompt/message-conversion-error.ts\n\nvar name8 = \"AI_MessageConversionError\";\nvar marker8 = `vercel.ai.error.${name8}`;\nvar symbol8 = Symbol.for(marker8);\nvar _a8;\nvar MessageConversionError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ originalMessage, message }){\n        super({\n            name: name8,\n            message\n        });\n        this[_a8] = true;\n        this.originalMessage = originalMessage;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker8);\n    }\n};\n_a8 = symbol8;\n// core/prompt/convert-to-core-messages.ts\nfunction convertToCoreMessages(messages, options) {\n    var _a17, _b;\n    const tools = (_a17 = options == null ? void 0 : options.tools) != null ? _a17 : {};\n    const coreMessages = [];\n    for(let i = 0; i < messages.length; i++){\n        const message = messages[i];\n        const isLastMessage = i === messages.length - 1;\n        const { role, content, experimental_attachments } = message;\n        switch(role){\n            case \"system\":\n                {\n                    coreMessages.push({\n                        role: \"system\",\n                        content\n                    });\n                    break;\n                }\n            case \"user\":\n                {\n                    if (message.parts == null) {\n                        coreMessages.push({\n                            role: \"user\",\n                            content: experimental_attachments ? [\n                                {\n                                    type: \"text\",\n                                    text: content\n                                },\n                                ...attachmentsToParts(experimental_attachments)\n                            ] : content\n                        });\n                    } else {\n                        const textParts = message.parts.filter((part)=>part.type === \"text\").map((part)=>({\n                                type: \"text\",\n                                text: part.text\n                            }));\n                        coreMessages.push({\n                            role: \"user\",\n                            content: experimental_attachments ? [\n                                ...textParts,\n                                ...attachmentsToParts(experimental_attachments)\n                            ] : textParts\n                        });\n                    }\n                    break;\n                }\n            case \"assistant\":\n                {\n                    if (message.parts != null) {\n                        let processBlock2 = function() {\n                            const content2 = [];\n                            for (const part of block){\n                                switch(part.type){\n                                    case \"file\":\n                                    case \"text\":\n                                        {\n                                            content2.push(part);\n                                            break;\n                                        }\n                                    case \"reasoning\":\n                                        {\n                                            for (const detail of part.details){\n                                                switch(detail.type){\n                                                    case \"text\":\n                                                        content2.push({\n                                                            type: \"reasoning\",\n                                                            text: detail.text,\n                                                            signature: detail.signature\n                                                        });\n                                                        break;\n                                                    case \"redacted\":\n                                                        content2.push({\n                                                            type: \"redacted-reasoning\",\n                                                            data: detail.data\n                                                        });\n                                                        break;\n                                                }\n                                            }\n                                            break;\n                                        }\n                                    case \"tool-invocation\":\n                                        content2.push({\n                                            type: \"tool-call\",\n                                            toolCallId: part.toolInvocation.toolCallId,\n                                            toolName: part.toolInvocation.toolName,\n                                            args: part.toolInvocation.args\n                                        });\n                                        break;\n                                    default:\n                                        {\n                                            const _exhaustiveCheck = part;\n                                            throw new Error(`Unsupported part: ${_exhaustiveCheck}`);\n                                        }\n                                }\n                            }\n                            coreMessages.push({\n                                role: \"assistant\",\n                                content: content2\n                            });\n                            const stepInvocations = block.filter((part)=>part.type === \"tool-invocation\").map((part)=>part.toolInvocation);\n                            if (stepInvocations.length > 0) {\n                                coreMessages.push({\n                                    role: \"tool\",\n                                    content: stepInvocations.map((toolInvocation)=>{\n                                        if (!(\"result\" in toolInvocation)) {\n                                            throw new MessageConversionError({\n                                                originalMessage: message,\n                                                message: \"ToolInvocation must have a result: \" + JSON.stringify(toolInvocation)\n                                            });\n                                        }\n                                        const { toolCallId, toolName, result } = toolInvocation;\n                                        const tool2 = tools[toolName];\n                                        return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {\n                                            type: \"tool-result\",\n                                            toolCallId,\n                                            toolName,\n                                            result: tool2.experimental_toToolResultContent(result),\n                                            experimental_content: tool2.experimental_toToolResultContent(result)\n                                        } : {\n                                            type: \"tool-result\",\n                                            toolCallId,\n                                            toolName,\n                                            result\n                                        };\n                                    })\n                                });\n                            }\n                            block = [];\n                            blockHasToolInvocations = false;\n                            currentStep++;\n                        };\n                        var processBlock = processBlock2;\n                        let currentStep = 0;\n                        let blockHasToolInvocations = false;\n                        let block = [];\n                        for (const part of message.parts){\n                            switch(part.type){\n                                case \"text\":\n                                    {\n                                        if (blockHasToolInvocations) {\n                                            processBlock2();\n                                        }\n                                        block.push(part);\n                                        break;\n                                    }\n                                case \"file\":\n                                case \"reasoning\":\n                                    {\n                                        block.push(part);\n                                        break;\n                                    }\n                                case \"tool-invocation\":\n                                    {\n                                        if (((_b = part.toolInvocation.step) != null ? _b : 0) !== currentStep) {\n                                            processBlock2();\n                                        }\n                                        block.push(part);\n                                        blockHasToolInvocations = true;\n                                        break;\n                                    }\n                            }\n                        }\n                        processBlock2();\n                        break;\n                    }\n                    const toolInvocations = message.toolInvocations;\n                    if (toolInvocations == null || toolInvocations.length === 0) {\n                        coreMessages.push({\n                            role: \"assistant\",\n                            content\n                        });\n                        break;\n                    }\n                    const maxStep = toolInvocations.reduce((max, toolInvocation)=>{\n                        var _a18;\n                        return Math.max(max, (_a18 = toolInvocation.step) != null ? _a18 : 0);\n                    }, 0);\n                    for(let i2 = 0; i2 <= maxStep; i2++){\n                        const stepInvocations = toolInvocations.filter((toolInvocation)=>{\n                            var _a18;\n                            return ((_a18 = toolInvocation.step) != null ? _a18 : 0) === i2;\n                        });\n                        if (stepInvocations.length === 0) {\n                            continue;\n                        }\n                        coreMessages.push({\n                            role: \"assistant\",\n                            content: [\n                                ...isLastMessage && content && i2 === 0 ? [\n                                    {\n                                        type: \"text\",\n                                        text: content\n                                    }\n                                ] : [],\n                                ...stepInvocations.map(({ toolCallId, toolName, args })=>({\n                                        type: \"tool-call\",\n                                        toolCallId,\n                                        toolName,\n                                        args\n                                    }))\n                            ]\n                        });\n                        coreMessages.push({\n                            role: \"tool\",\n                            content: stepInvocations.map((toolInvocation)=>{\n                                if (!(\"result\" in toolInvocation)) {\n                                    throw new MessageConversionError({\n                                        originalMessage: message,\n                                        message: \"ToolInvocation must have a result: \" + JSON.stringify(toolInvocation)\n                                    });\n                                }\n                                const { toolCallId, toolName, result } = toolInvocation;\n                                const tool2 = tools[toolName];\n                                return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {\n                                    type: \"tool-result\",\n                                    toolCallId,\n                                    toolName,\n                                    result: tool2.experimental_toToolResultContent(result),\n                                    experimental_content: tool2.experimental_toToolResultContent(result)\n                                } : {\n                                    type: \"tool-result\",\n                                    toolCallId,\n                                    toolName,\n                                    result\n                                };\n                            })\n                        });\n                    }\n                    if (content && !isLastMessage) {\n                        coreMessages.push({\n                            role: \"assistant\",\n                            content\n                        });\n                    }\n                    break;\n                }\n            case \"data\":\n                {\n                    break;\n                }\n            default:\n                {\n                    const _exhaustiveCheck = role;\n                    throw new MessageConversionError({\n                        originalMessage: message,\n                        message: `Unsupported role: ${_exhaustiveCheck}`\n                    });\n                }\n        }\n    }\n    return coreMessages;\n}\n// core/prompt/detect-prompt-type.ts\nfunction detectPromptType(prompt) {\n    if (!Array.isArray(prompt)) {\n        return \"other\";\n    }\n    if (prompt.length === 0) {\n        return \"messages\";\n    }\n    const characteristics = prompt.map(detectSingleMessageCharacteristics);\n    if (characteristics.some((c)=>c === \"has-ui-specific-parts\")) {\n        return \"ui-messages\";\n    } else if (characteristics.every((c)=>c === \"has-core-specific-parts\" || c === \"message\")) {\n        return \"messages\";\n    } else {\n        return \"other\";\n    }\n}\nfunction detectSingleMessageCharacteristics(message) {\n    if (typeof message === \"object\" && message !== null && (message.role === \"function\" || // UI-only role\n    message.role === \"data\" || // UI-only role\n    \"toolInvocations\" in message || // UI-specific field\n    \"parts\" in message || // UI-specific field\n    \"experimental_attachments\" in message)) {\n        return \"has-ui-specific-parts\";\n    } else if (typeof message === \"object\" && message !== null && \"content\" in message && (Array.isArray(message.content) || // Core messages can have array content\n    \"experimental_providerMetadata\" in message || \"providerOptions\" in message)) {\n        return \"has-core-specific-parts\";\n    } else if (typeof message === \"object\" && message !== null && \"role\" in message && \"content\" in message && typeof message.content === \"string\" && [\n        \"system\",\n        \"user\",\n        \"assistant\",\n        \"tool\"\n    ].includes(message.role)) {\n        return \"message\";\n    } else {\n        return \"other\";\n    }\n}\n// core/prompt/message.ts\n\n// core/types/provider-metadata.ts\n\n// core/types/json-value.ts\n\nvar jsonValueSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.lazy(()=>zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.null(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.number(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.record(zod__WEBPACK_IMPORTED_MODULE_4__.z.string(), jsonValueSchema),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.array(jsonValueSchema)\n    ]));\n// core/types/provider-metadata.ts\nvar providerMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.record(zod__WEBPACK_IMPORTED_MODULE_4__.z.string(), zod__WEBPACK_IMPORTED_MODULE_4__.z.record(zod__WEBPACK_IMPORTED_MODULE_4__.z.string(), jsonValueSchema));\n// core/prompt/content-part.ts\n\n// core/prompt/tool-result-content.ts\n\nvar toolResultContentSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"text\"),\n        text: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n    }),\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"image\"),\n        data: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        mimeType: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional()\n    })\n]));\n// core/prompt/content-part.ts\nvar textPartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"text\"),\n    text: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar imagePartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"image\"),\n    image: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        dataContentSchema,\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.instanceof(URL)\n    ]),\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional(),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar filePartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"file\"),\n    data: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        dataContentSchema,\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.instanceof(URL)\n    ]),\n    filename: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional(),\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar reasoningPartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"reasoning\"),\n    text: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar redactedReasoningPartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"redacted-reasoning\"),\n    data: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar toolCallPartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"tool-call\"),\n    toolCallId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    toolName: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    args: zod__WEBPACK_IMPORTED_MODULE_4__.z.unknown(),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar toolResultPartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"tool-result\"),\n    toolCallId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    toolName: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    result: zod__WEBPACK_IMPORTED_MODULE_4__.z.unknown(),\n    content: toolResultContentSchema.optional(),\n    isError: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().optional(),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\n// core/prompt/message.ts\nvar coreSystemMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"system\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreUserMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"user\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n            textPartSchema,\n            imagePartSchema,\n            filePartSchema\n        ]))\n    ]),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreAssistantMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"assistant\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n            textPartSchema,\n            filePartSchema,\n            reasoningPartSchema,\n            redactedReasoningPartSchema,\n            toolCallPartSchema\n        ]))\n    ]),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreToolMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"tool\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(toolResultPartSchema),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n    coreSystemMessageSchema,\n    coreUserMessageSchema,\n    coreAssistantMessageSchema,\n    coreToolMessageSchema\n]);\n// core/prompt/standardize-prompt.ts\nfunction standardizePrompt({ prompt, tools }) {\n    if (prompt.prompt == null && prompt.messages == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n            prompt,\n            message: \"prompt or messages must be defined\"\n        });\n    }\n    if (prompt.prompt != null && prompt.messages != null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n            prompt,\n            message: \"prompt and messages cannot be defined at the same time\"\n        });\n    }\n    if (prompt.system != null && typeof prompt.system !== \"string\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n            prompt,\n            message: \"system must be a string\"\n        });\n    }\n    if (prompt.prompt != null) {\n        if (typeof prompt.prompt !== \"string\") {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n                prompt,\n                message: \"prompt must be a string\"\n            });\n        }\n        return {\n            type: \"prompt\",\n            system: prompt.system,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt.prompt\n                }\n            ]\n        };\n    }\n    if (prompt.messages != null) {\n        const promptType = detectPromptType(prompt.messages);\n        if (promptType === \"other\") {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n                prompt,\n                message: \"messages must be an array of CoreMessage or UIMessage\"\n            });\n        }\n        const messages = promptType === \"ui-messages\" ? convertToCoreMessages(prompt.messages, {\n            tools\n        }) : prompt.messages;\n        if (messages.length === 0) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n                prompt,\n                message: \"messages must not be empty\"\n            });\n        }\n        const validationResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n            value: messages,\n            schema: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(coreMessageSchema)\n        });\n        if (!validationResult.success) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n                prompt,\n                message: \"messages must be an array of CoreMessage or UIMessage\",\n                cause: validationResult.error\n            });\n        }\n        return {\n            type: \"messages\",\n            messages,\n            system: prompt.system\n        };\n    }\n    throw new Error(\"unreachable\");\n}\n// core/types/usage.ts\nfunction calculateLanguageModelUsage({ promptTokens, completionTokens }) {\n    return {\n        promptTokens,\n        completionTokens,\n        totalTokens: promptTokens + completionTokens\n    };\n}\nfunction addLanguageModelUsage(usage1, usage2) {\n    return {\n        promptTokens: usage1.promptTokens + usage2.promptTokens,\n        completionTokens: usage1.completionTokens + usage2.completionTokens,\n        totalTokens: usage1.totalTokens + usage2.totalTokens\n    };\n}\n// core/generate-object/inject-json-instruction.ts\nvar DEFAULT_SCHEMA_PREFIX = \"JSON schema:\";\nvar DEFAULT_SCHEMA_SUFFIX = \"You MUST answer with a JSON object that matches the JSON schema above.\";\nvar DEFAULT_GENERIC_SUFFIX = \"You MUST answer with JSON.\";\nfunction injectJsonInstruction({ prompt, schema, schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : void 0, schemaSuffix = schema != null ? DEFAULT_SCHEMA_SUFFIX : DEFAULT_GENERIC_SUFFIX }) {\n    return [\n        prompt != null && prompt.length > 0 ? prompt : void 0,\n        prompt != null && prompt.length > 0 ? \"\" : void 0,\n        // add a newline if prompt is not null\n        schemaPrefix,\n        schema != null ? JSON.stringify(schema) : void 0,\n        schemaSuffix\n    ].filter((line)=>line != null).join(\"\\n\");\n}\n// core/generate-object/output-strategy.ts\n\n\n\n// core/util/async-iterable-stream.ts\nfunction createAsyncIterableStream(source) {\n    const stream = source.pipeThrough(new TransformStream());\n    stream[Symbol.asyncIterator] = ()=>{\n        const reader = stream.getReader();\n        return {\n            async next () {\n                const { done, value } = await reader.read();\n                return done ? {\n                    done: true,\n                    value: void 0\n                } : {\n                    done: false,\n                    value\n                };\n            }\n        };\n    };\n    return stream;\n}\n// core/generate-object/output-strategy.ts\nvar noSchemaOutputStrategy = {\n    type: \"no-schema\",\n    jsonSchema: void 0,\n    validatePartialResult ({ value, textDelta }) {\n        return {\n            success: true,\n            value: {\n                partial: value,\n                textDelta\n            }\n        };\n    },\n    validateFinalResult (value, context) {\n        return value === void 0 ? {\n            success: false,\n            error: new NoObjectGeneratedError({\n                message: \"No object generated: response did not match schema.\",\n                text: context.text,\n                response: context.response,\n                usage: context.usage,\n                finishReason: context.finishReason\n            })\n        } : {\n            success: true,\n            value\n        };\n    },\n    createElementStream () {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n            functionality: \"element streams in no-schema mode\"\n        });\n    }\n};\nvar objectOutputStrategy = (schema)=>({\n        type: \"object\",\n        jsonSchema: schema.jsonSchema,\n        validatePartialResult ({ value, textDelta }) {\n            return {\n                success: true,\n                value: {\n                    // Note: currently no validation of partial results:\n                    partial: value,\n                    textDelta\n                }\n            };\n        },\n        validateFinalResult (value) {\n            return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n                value,\n                schema\n            });\n        },\n        createElementStream () {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                functionality: \"element streams in object mode\"\n            });\n        }\n    });\nvar arrayOutputStrategy = (schema)=>{\n    const { $schema, ...itemSchema } = schema.jsonSchema;\n    return {\n        type: \"enum\",\n        // wrap in object that contains array of elements, since most LLMs will not\n        // be able to generate an array directly:\n        // possible future optimization: use arrays directly when model supports grammar-guided generation\n        jsonSchema: {\n            $schema: \"http://json-schema.org/draft-07/schema#\",\n            type: \"object\",\n            properties: {\n                elements: {\n                    type: \"array\",\n                    items: itemSchema\n                }\n            },\n            required: [\n                \"elements\"\n            ],\n            additionalProperties: false\n        },\n        validatePartialResult ({ value, latestObject, isFirstDelta, isFinalDelta }) {\n            var _a17;\n            if (!(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.isJSONObject)(value) || !(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.isJSONArray)(value.elements)) {\n                return {\n                    success: false,\n                    error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError({\n                        value,\n                        cause: \"value must be an object that contains an array of elements\"\n                    })\n                };\n            }\n            const inputArray = value.elements;\n            const resultArray = [];\n            for(let i = 0; i < inputArray.length; i++){\n                const element = inputArray[i];\n                const result = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n                    value: element,\n                    schema\n                });\n                if (i === inputArray.length - 1 && !isFinalDelta) {\n                    continue;\n                }\n                if (!result.success) {\n                    return result;\n                }\n                resultArray.push(result.value);\n            }\n            const publishedElementCount = (_a17 = latestObject == null ? void 0 : latestObject.length) != null ? _a17 : 0;\n            let textDelta = \"\";\n            if (isFirstDelta) {\n                textDelta += \"[\";\n            }\n            if (publishedElementCount > 0) {\n                textDelta += \",\";\n            }\n            textDelta += resultArray.slice(publishedElementCount).map((element)=>JSON.stringify(element)).join(\",\");\n            if (isFinalDelta) {\n                textDelta += \"]\";\n            }\n            return {\n                success: true,\n                value: {\n                    partial: resultArray,\n                    textDelta\n                }\n            };\n        },\n        validateFinalResult (value) {\n            if (!(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.isJSONObject)(value) || !(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.isJSONArray)(value.elements)) {\n                return {\n                    success: false,\n                    error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError({\n                        value,\n                        cause: \"value must be an object that contains an array of elements\"\n                    })\n                };\n            }\n            const inputArray = value.elements;\n            for (const element of inputArray){\n                const result = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n                    value: element,\n                    schema\n                });\n                if (!result.success) {\n                    return result;\n                }\n            }\n            return {\n                success: true,\n                value: inputArray\n            };\n        },\n        createElementStream (originalStream) {\n            let publishedElements = 0;\n            return createAsyncIterableStream(originalStream.pipeThrough(new TransformStream({\n                transform (chunk, controller) {\n                    switch(chunk.type){\n                        case \"object\":\n                            {\n                                const array = chunk.object;\n                                for(; publishedElements < array.length; publishedElements++){\n                                    controller.enqueue(array[publishedElements]);\n                                }\n                                break;\n                            }\n                        case \"text-delta\":\n                        case \"finish\":\n                        case \"error\":\n                            break;\n                        default:\n                            {\n                                const _exhaustiveCheck = chunk;\n                                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n                            }\n                    }\n                }\n            })));\n        }\n    };\n};\nvar enumOutputStrategy = (enumValues)=>{\n    return {\n        type: \"enum\",\n        // wrap in object that contains result, since most LLMs will not\n        // be able to generate an enum value directly:\n        // possible future optimization: use enums directly when model supports top-level enums\n        jsonSchema: {\n            $schema: \"http://json-schema.org/draft-07/schema#\",\n            type: \"object\",\n            properties: {\n                result: {\n                    type: \"string\",\n                    enum: enumValues\n                }\n            },\n            required: [\n                \"result\"\n            ],\n            additionalProperties: false\n        },\n        validateFinalResult (value) {\n            if (!(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.isJSONObject)(value) || typeof value.result !== \"string\") {\n                return {\n                    success: false,\n                    error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError({\n                        value,\n                        cause: 'value must be an object that contains a string in the \"result\" property.'\n                    })\n                };\n            }\n            const result = value.result;\n            return enumValues.includes(result) ? {\n                success: true,\n                value: result\n            } : {\n                success: false,\n                error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError({\n                    value,\n                    cause: \"value must be a string in the enum\"\n                })\n            };\n        },\n        validatePartialResult () {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                functionality: \"partial results in enum mode\"\n            });\n        },\n        createElementStream () {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                functionality: \"element streams in enum mode\"\n            });\n        }\n    };\n};\nfunction getOutputStrategy({ output, schema, enumValues }) {\n    switch(output){\n        case \"object\":\n            return objectOutputStrategy((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(schema));\n        case \"array\":\n            return arrayOutputStrategy((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(schema));\n        case \"enum\":\n            return enumOutputStrategy(enumValues);\n        case \"no-schema\":\n            return noSchemaOutputStrategy;\n        default:\n            {\n                const _exhaustiveCheck = output;\n                throw new Error(`Unsupported output: ${_exhaustiveCheck}`);\n            }\n    }\n}\n// core/generate-object/validate-object-generation-input.ts\nfunction validateObjectGenerationInput({ output, mode, schema, schemaName, schemaDescription, enumValues }) {\n    if (output != null && output !== \"object\" && output !== \"array\" && output !== \"enum\" && output !== \"no-schema\") {\n        throw new InvalidArgumentError({\n            parameter: \"output\",\n            value: output,\n            message: \"Invalid output type.\"\n        });\n    }\n    if (output === \"no-schema\") {\n        if (mode === \"auto\" || mode === \"tool\") {\n            throw new InvalidArgumentError({\n                parameter: \"mode\",\n                value: mode,\n                message: 'Mode must be \"json\" for no-schema output.'\n            });\n        }\n        if (schema != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Schema is not supported for no-schema output.\"\n            });\n        }\n        if (schemaDescription != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaDescription\",\n                value: schemaDescription,\n                message: \"Schema description is not supported for no-schema output.\"\n            });\n        }\n        if (schemaName != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaName\",\n                value: schemaName,\n                message: \"Schema name is not supported for no-schema output.\"\n            });\n        }\n        if (enumValues != null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are not supported for no-schema output.\"\n            });\n        }\n    }\n    if (output === \"object\") {\n        if (schema == null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Schema is required for object output.\"\n            });\n        }\n        if (enumValues != null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are not supported for object output.\"\n            });\n        }\n    }\n    if (output === \"array\") {\n        if (schema == null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Element schema is required for array output.\"\n            });\n        }\n        if (enumValues != null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are not supported for array output.\"\n            });\n        }\n    }\n    if (output === \"enum\") {\n        if (schema != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Schema is not supported for enum output.\"\n            });\n        }\n        if (schemaDescription != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaDescription\",\n                value: schemaDescription,\n                message: \"Schema description is not supported for enum output.\"\n            });\n        }\n        if (schemaName != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaName\",\n                value: schemaName,\n                message: \"Schema name is not supported for enum output.\"\n            });\n        }\n        if (enumValues == null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are required for enum output.\"\n            });\n        }\n        for (const value of enumValues){\n            if (typeof value !== \"string\") {\n                throw new InvalidArgumentError({\n                    parameter: \"enumValues\",\n                    value,\n                    message: \"Enum values must be strings.\"\n                });\n            }\n        }\n    }\n}\n// core/generate-object/generate-object.ts\nvar originalGenerateId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator)({\n    prefix: \"aiobj\",\n    size: 24\n});\nasync function generateObject({ model, enum: enumValues, // rename bc enum is reserved by typescript\nschema: inputSchema, schemaName, schemaDescription, mode, output = \"object\", system, prompt, messages, maxRetries: maxRetriesArg, abortSignal, headers, experimental_repairText: repairText, experimental_telemetry: telemetry, experimental_providerMetadata, providerOptions = experimental_providerMetadata, _internal: { generateId: generateId3 = originalGenerateId, currentDate = ()=>/* @__PURE__ */ new Date() } = {}, ...settings }) {\n    validateObjectGenerationInput({\n        output,\n        mode,\n        schema: inputSchema,\n        schemaName,\n        schemaDescription,\n        enumValues\n    });\n    const { maxRetries, retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const outputStrategy = getOutputStrategy({\n        output,\n        schema: inputSchema,\n        enumValues\n    });\n    if (outputStrategy.type === \"no-schema\" && mode === void 0) {\n        mode = \"json\";\n    }\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            ...settings,\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.generateObject\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.generateObject\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.prompt\": {\n                    input: ()=>JSON.stringify({\n                            system,\n                            prompt,\n                            messages\n                        })\n                },\n                \"ai.schema\": outputStrategy.jsonSchema != null ? {\n                    input: ()=>JSON.stringify(outputStrategy.jsonSchema)\n                } : void 0,\n                \"ai.schema.name\": schemaName,\n                \"ai.schema.description\": schemaDescription,\n                \"ai.settings.output\": outputStrategy.type,\n                \"ai.settings.mode\": mode\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            var _a17, _b, _c, _d;\n            if (mode === \"auto\" || mode == null) {\n                mode = model.defaultObjectGenerationMode;\n            }\n            let result;\n            let finishReason;\n            let usage;\n            let warnings;\n            let rawResponse;\n            let response;\n            let request;\n            let logprobs;\n            let resultProviderMetadata;\n            switch(mode){\n                case \"json\":\n                    {\n                        const standardizedPrompt = standardizePrompt({\n                            prompt: {\n                                system: outputStrategy.jsonSchema == null ? injectJsonInstruction({\n                                    prompt: system\n                                }) : model.supportsStructuredOutputs ? system : injectJsonInstruction({\n                                    prompt: system,\n                                    schema: outputStrategy.jsonSchema\n                                }),\n                                prompt,\n                                messages\n                            },\n                            tools: void 0\n                        });\n                        const promptMessages = await convertToLanguageModelPrompt({\n                            prompt: standardizedPrompt,\n                            modelSupportsImageUrls: model.supportsImageUrls,\n                            modelSupportsUrl: (_a17 = model.supportsUrl) == null ? void 0 : _a17.bind(model)\n                        });\n                        const generateResult = await retry(()=>recordSpan({\n                                name: \"ai.generateObject.doGenerate\",\n                                attributes: selectTelemetryAttributes({\n                                    telemetry,\n                                    attributes: {\n                                        ...assembleOperationName({\n                                            operationId: \"ai.generateObject.doGenerate\",\n                                            telemetry\n                                        }),\n                                        ...baseTelemetryAttributes,\n                                        \"ai.prompt.format\": {\n                                            input: ()=>standardizedPrompt.type\n                                        },\n                                        \"ai.prompt.messages\": {\n                                            input: ()=>JSON.stringify(promptMessages)\n                                        },\n                                        \"ai.settings.mode\": mode,\n                                        // standardized gen-ai llm span attributes:\n                                        \"gen_ai.system\": model.provider,\n                                        \"gen_ai.request.model\": model.modelId,\n                                        \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                        \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                        \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                        \"gen_ai.request.temperature\": settings.temperature,\n                                        \"gen_ai.request.top_k\": settings.topK,\n                                        \"gen_ai.request.top_p\": settings.topP\n                                    }\n                                }),\n                                tracer,\n                                fn: async (span2)=>{\n                                    var _a18, _b2, _c2, _d2, _e, _f;\n                                    const result2 = await model.doGenerate({\n                                        mode: {\n                                            type: \"object-json\",\n                                            schema: outputStrategy.jsonSchema,\n                                            name: schemaName,\n                                            description: schemaDescription\n                                        },\n                                        ...prepareCallSettings(settings),\n                                        inputFormat: standardizedPrompt.type,\n                                        prompt: promptMessages,\n                                        providerMetadata: providerOptions,\n                                        abortSignal,\n                                        headers\n                                    });\n                                    const responseData = {\n                                        id: (_b2 = (_a18 = result2.response) == null ? void 0 : _a18.id) != null ? _b2 : generateId3(),\n                                        timestamp: (_d2 = (_c2 = result2.response) == null ? void 0 : _c2.timestamp) != null ? _d2 : currentDate(),\n                                        modelId: (_f = (_e = result2.response) == null ? void 0 : _e.modelId) != null ? _f : model.modelId\n                                    };\n                                    if (result2.text === void 0) {\n                                        throw new NoObjectGeneratedError({\n                                            message: \"No object generated: the model did not return a response.\",\n                                            response: responseData,\n                                            usage: calculateLanguageModelUsage(result2.usage),\n                                            finishReason: result2.finishReason\n                                        });\n                                    }\n                                    span2.setAttributes(selectTelemetryAttributes({\n                                        telemetry,\n                                        attributes: {\n                                            \"ai.response.finishReason\": result2.finishReason,\n                                            \"ai.response.object\": {\n                                                output: ()=>result2.text\n                                            },\n                                            \"ai.response.id\": responseData.id,\n                                            \"ai.response.model\": responseData.modelId,\n                                            \"ai.response.timestamp\": responseData.timestamp.toISOString(),\n                                            \"ai.usage.promptTokens\": result2.usage.promptTokens,\n                                            \"ai.usage.completionTokens\": result2.usage.completionTokens,\n                                            // standardized gen-ai llm span attributes:\n                                            \"gen_ai.response.finish_reasons\": [\n                                                result2.finishReason\n                                            ],\n                                            \"gen_ai.response.id\": responseData.id,\n                                            \"gen_ai.response.model\": responseData.modelId,\n                                            \"gen_ai.usage.prompt_tokens\": result2.usage.promptTokens,\n                                            \"gen_ai.usage.completion_tokens\": result2.usage.completionTokens\n                                        }\n                                    }));\n                                    return {\n                                        ...result2,\n                                        objectText: result2.text,\n                                        responseData\n                                    };\n                                }\n                            }));\n                        result = generateResult.objectText;\n                        finishReason = generateResult.finishReason;\n                        usage = generateResult.usage;\n                        warnings = generateResult.warnings;\n                        rawResponse = generateResult.rawResponse;\n                        logprobs = generateResult.logprobs;\n                        resultProviderMetadata = generateResult.providerMetadata;\n                        request = (_b = generateResult.request) != null ? _b : {};\n                        response = generateResult.responseData;\n                        break;\n                    }\n                case \"tool\":\n                    {\n                        const standardizedPrompt = standardizePrompt({\n                            prompt: {\n                                system,\n                                prompt,\n                                messages\n                            },\n                            tools: void 0\n                        });\n                        const promptMessages = await convertToLanguageModelPrompt({\n                            prompt: standardizedPrompt,\n                            modelSupportsImageUrls: model.supportsImageUrls,\n                            modelSupportsUrl: (_c = model.supportsUrl) == null ? void 0 : _c.bind(model)\n                        });\n                        const inputFormat = standardizedPrompt.type;\n                        const generateResult = await retry(()=>recordSpan({\n                                name: \"ai.generateObject.doGenerate\",\n                                attributes: selectTelemetryAttributes({\n                                    telemetry,\n                                    attributes: {\n                                        ...assembleOperationName({\n                                            operationId: \"ai.generateObject.doGenerate\",\n                                            telemetry\n                                        }),\n                                        ...baseTelemetryAttributes,\n                                        \"ai.prompt.format\": {\n                                            input: ()=>inputFormat\n                                        },\n                                        \"ai.prompt.messages\": {\n                                            input: ()=>JSON.stringify(promptMessages)\n                                        },\n                                        \"ai.settings.mode\": mode,\n                                        // standardized gen-ai llm span attributes:\n                                        \"gen_ai.system\": model.provider,\n                                        \"gen_ai.request.model\": model.modelId,\n                                        \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                        \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                        \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                        \"gen_ai.request.temperature\": settings.temperature,\n                                        \"gen_ai.request.top_k\": settings.topK,\n                                        \"gen_ai.request.top_p\": settings.topP\n                                    }\n                                }),\n                                tracer,\n                                fn: async (span2)=>{\n                                    var _a18, _b2, _c2, _d2, _e, _f, _g, _h;\n                                    const result2 = await model.doGenerate({\n                                        mode: {\n                                            type: \"object-tool\",\n                                            tool: {\n                                                type: \"function\",\n                                                name: schemaName != null ? schemaName : \"json\",\n                                                description: schemaDescription != null ? schemaDescription : \"Respond with a JSON object.\",\n                                                parameters: outputStrategy.jsonSchema\n                                            }\n                                        },\n                                        ...prepareCallSettings(settings),\n                                        inputFormat,\n                                        prompt: promptMessages,\n                                        providerMetadata: providerOptions,\n                                        abortSignal,\n                                        headers\n                                    });\n                                    const objectText = (_b2 = (_a18 = result2.toolCalls) == null ? void 0 : _a18[0]) == null ? void 0 : _b2.args;\n                                    const responseData = {\n                                        id: (_d2 = (_c2 = result2.response) == null ? void 0 : _c2.id) != null ? _d2 : generateId3(),\n                                        timestamp: (_f = (_e = result2.response) == null ? void 0 : _e.timestamp) != null ? _f : currentDate(),\n                                        modelId: (_h = (_g = result2.response) == null ? void 0 : _g.modelId) != null ? _h : model.modelId\n                                    };\n                                    if (objectText === void 0) {\n                                        throw new NoObjectGeneratedError({\n                                            message: \"No object generated: the tool was not called.\",\n                                            response: responseData,\n                                            usage: calculateLanguageModelUsage(result2.usage),\n                                            finishReason: result2.finishReason\n                                        });\n                                    }\n                                    span2.setAttributes(selectTelemetryAttributes({\n                                        telemetry,\n                                        attributes: {\n                                            \"ai.response.finishReason\": result2.finishReason,\n                                            \"ai.response.object\": {\n                                                output: ()=>objectText\n                                            },\n                                            \"ai.response.id\": responseData.id,\n                                            \"ai.response.model\": responseData.modelId,\n                                            \"ai.response.timestamp\": responseData.timestamp.toISOString(),\n                                            \"ai.usage.promptTokens\": result2.usage.promptTokens,\n                                            \"ai.usage.completionTokens\": result2.usage.completionTokens,\n                                            // standardized gen-ai llm span attributes:\n                                            \"gen_ai.response.finish_reasons\": [\n                                                result2.finishReason\n                                            ],\n                                            \"gen_ai.response.id\": responseData.id,\n                                            \"gen_ai.response.model\": responseData.modelId,\n                                            \"gen_ai.usage.input_tokens\": result2.usage.promptTokens,\n                                            \"gen_ai.usage.output_tokens\": result2.usage.completionTokens\n                                        }\n                                    }));\n                                    return {\n                                        ...result2,\n                                        objectText,\n                                        responseData\n                                    };\n                                }\n                            }));\n                        result = generateResult.objectText;\n                        finishReason = generateResult.finishReason;\n                        usage = generateResult.usage;\n                        warnings = generateResult.warnings;\n                        rawResponse = generateResult.rawResponse;\n                        logprobs = generateResult.logprobs;\n                        resultProviderMetadata = generateResult.providerMetadata;\n                        request = (_d = generateResult.request) != null ? _d : {};\n                        response = generateResult.responseData;\n                        break;\n                    }\n                case void 0:\n                    {\n                        throw new Error(\"Model does not have a default object generation mode.\");\n                    }\n                default:\n                    {\n                        const _exhaustiveCheck = mode;\n                        throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);\n                    }\n            }\n            function processResult(result2) {\n                const parseResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)({\n                    text: result2\n                });\n                if (!parseResult.success) {\n                    throw new NoObjectGeneratedError({\n                        message: \"No object generated: could not parse the response.\",\n                        cause: parseResult.error,\n                        text: result2,\n                        response,\n                        usage: calculateLanguageModelUsage(usage),\n                        finishReason\n                    });\n                }\n                const validationResult = outputStrategy.validateFinalResult(parseResult.value, {\n                    text: result2,\n                    response,\n                    usage: calculateLanguageModelUsage(usage)\n                });\n                if (!validationResult.success) {\n                    throw new NoObjectGeneratedError({\n                        message: \"No object generated: response did not match schema.\",\n                        cause: validationResult.error,\n                        text: result2,\n                        response,\n                        usage: calculateLanguageModelUsage(usage),\n                        finishReason\n                    });\n                }\n                return validationResult.value;\n            }\n            let object2;\n            try {\n                object2 = processResult(result);\n            } catch (error) {\n                if (repairText != null && NoObjectGeneratedError.isInstance(error) && (_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError.isInstance(error.cause) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError.isInstance(error.cause))) {\n                    const repairedText = await repairText({\n                        text: result,\n                        error: error.cause\n                    });\n                    if (repairedText === null) {\n                        throw error;\n                    }\n                    object2 = processResult(repairedText);\n                } else {\n                    throw error;\n                }\n            }\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.response.finishReason\": finishReason,\n                    \"ai.response.object\": {\n                        output: ()=>JSON.stringify(object2)\n                    },\n                    \"ai.usage.promptTokens\": usage.promptTokens,\n                    \"ai.usage.completionTokens\": usage.completionTokens\n                }\n            }));\n            return new DefaultGenerateObjectResult({\n                object: object2,\n                finishReason,\n                usage: calculateLanguageModelUsage(usage),\n                warnings,\n                request,\n                response: {\n                    ...response,\n                    headers: rawResponse == null ? void 0 : rawResponse.headers,\n                    body: rawResponse == null ? void 0 : rawResponse.body\n                },\n                logprobs,\n                providerMetadata: resultProviderMetadata\n            });\n        }\n    });\n}\nvar DefaultGenerateObjectResult = class {\n    constructor(options){\n        this.object = options.object;\n        this.finishReason = options.finishReason;\n        this.usage = options.usage;\n        this.warnings = options.warnings;\n        this.providerMetadata = options.providerMetadata;\n        this.experimental_providerMetadata = options.providerMetadata;\n        this.response = options.response;\n        this.request = options.request;\n        this.logprobs = options.logprobs;\n    }\n    toJsonResponse(init) {\n        var _a17;\n        return new Response(JSON.stringify(this.object), {\n            status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,\n            headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {\n                contentType: \"application/json; charset=utf-8\"\n            })\n        });\n    }\n};\n// core/generate-object/stream-object.ts\n\n\n// util/delayed-promise.ts\nvar DelayedPromise = class {\n    constructor(){\n        this.status = {\n            type: \"pending\"\n        };\n        this._resolve = void 0;\n        this._reject = void 0;\n    }\n    get value() {\n        if (this.promise) {\n            return this.promise;\n        }\n        this.promise = new Promise((resolve, reject)=>{\n            if (this.status.type === \"resolved\") {\n                resolve(this.status.value);\n            } else if (this.status.type === \"rejected\") {\n                reject(this.status.error);\n            }\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n        return this.promise;\n    }\n    resolve(value) {\n        var _a17;\n        this.status = {\n            type: \"resolved\",\n            value\n        };\n        if (this.promise) {\n            (_a17 = this._resolve) == null ? void 0 : _a17.call(this, value);\n        }\n    }\n    reject(error) {\n        var _a17;\n        this.status = {\n            type: \"rejected\",\n            error\n        };\n        if (this.promise) {\n            (_a17 = this._reject) == null ? void 0 : _a17.call(this, error);\n        }\n    }\n};\n// util/create-resolvable-promise.ts\nfunction createResolvablePromise() {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n// core/util/create-stitchable-stream.ts\nfunction createStitchableStream() {\n    let innerStreamReaders = [];\n    let controller = null;\n    let isClosed = false;\n    let waitForNewStream = createResolvablePromise();\n    const processPull = async ()=>{\n        if (isClosed && innerStreamReaders.length === 0) {\n            controller == null ? void 0 : controller.close();\n            return;\n        }\n        if (innerStreamReaders.length === 0) {\n            waitForNewStream = createResolvablePromise();\n            await waitForNewStream.promise;\n            return processPull();\n        }\n        try {\n            const { value, done } = await innerStreamReaders[0].read();\n            if (done) {\n                innerStreamReaders.shift();\n                if (innerStreamReaders.length > 0) {\n                    await processPull();\n                } else if (isClosed) {\n                    controller == null ? void 0 : controller.close();\n                }\n            } else {\n                controller == null ? void 0 : controller.enqueue(value);\n            }\n        } catch (error) {\n            controller == null ? void 0 : controller.error(error);\n            innerStreamReaders.shift();\n            if (isClosed && innerStreamReaders.length === 0) {\n                controller == null ? void 0 : controller.close();\n            }\n        }\n    };\n    return {\n        stream: new ReadableStream({\n            start (controllerParam) {\n                controller = controllerParam;\n            },\n            pull: processPull,\n            async cancel () {\n                for (const reader of innerStreamReaders){\n                    await reader.cancel();\n                }\n                innerStreamReaders = [];\n                isClosed = true;\n            }\n        }),\n        addStream: (innerStream)=>{\n            if (isClosed) {\n                throw new Error(\"Cannot add inner stream: outer stream is closed\");\n            }\n            innerStreamReaders.push(innerStream.getReader());\n            waitForNewStream.resolve();\n        },\n        /**\n     * Gracefully close the outer stream. This will let the inner streams\n     * finish processing and then close the outer stream.\n     */ close: ()=>{\n            isClosed = true;\n            waitForNewStream.resolve();\n            if (innerStreamReaders.length === 0) {\n                controller == null ? void 0 : controller.close();\n            }\n        },\n        /**\n     * Immediately close the outer stream. This will cancel all inner streams\n     * and close the outer stream.\n     */ terminate: ()=>{\n            isClosed = true;\n            waitForNewStream.resolve();\n            innerStreamReaders.forEach((reader)=>reader.cancel());\n            innerStreamReaders = [];\n            controller == null ? void 0 : controller.close();\n        }\n    };\n}\n// core/util/now.ts\nfunction now() {\n    var _a17, _b;\n    return (_b = (_a17 = globalThis == null ? void 0 : globalThis.performance) == null ? void 0 : _a17.now()) != null ? _b : Date.now();\n}\n// core/generate-object/stream-object.ts\nvar originalGenerateId2 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator)({\n    prefix: \"aiobj\",\n    size: 24\n});\nfunction streamObject({ model, schema: inputSchema, schemaName, schemaDescription, mode, output = \"object\", system, prompt, messages, maxRetries, abortSignal, headers, experimental_telemetry: telemetry, experimental_providerMetadata, providerOptions = experimental_providerMetadata, onError, onFinish, _internal: { generateId: generateId3 = originalGenerateId2, currentDate = ()=>/* @__PURE__ */ new Date(), now: now2 = now } = {}, ...settings }) {\n    validateObjectGenerationInput({\n        output,\n        mode,\n        schema: inputSchema,\n        schemaName,\n        schemaDescription\n    });\n    const outputStrategy = getOutputStrategy({\n        output,\n        schema: inputSchema\n    });\n    if (outputStrategy.type === \"no-schema\" && mode === void 0) {\n        mode = \"json\";\n    }\n    return new DefaultStreamObjectResult({\n        model,\n        telemetry,\n        headers,\n        settings,\n        maxRetries,\n        abortSignal,\n        outputStrategy,\n        system,\n        prompt,\n        messages,\n        schemaName,\n        schemaDescription,\n        providerOptions,\n        mode,\n        onError,\n        onFinish,\n        generateId: generateId3,\n        currentDate,\n        now: now2\n    });\n}\nvar DefaultStreamObjectResult = class {\n    constructor({ model, headers, telemetry, settings, maxRetries: maxRetriesArg, abortSignal, outputStrategy, system, prompt, messages, schemaName, schemaDescription, providerOptions, mode, onError, onFinish, generateId: generateId3, currentDate, now: now2 }){\n        this.objectPromise = new DelayedPromise();\n        this.usagePromise = new DelayedPromise();\n        this.providerMetadataPromise = new DelayedPromise();\n        this.warningsPromise = new DelayedPromise();\n        this.requestPromise = new DelayedPromise();\n        this.responsePromise = new DelayedPromise();\n        const { maxRetries, retry } = prepareRetries({\n            maxRetries: maxRetriesArg\n        });\n        const baseTelemetryAttributes = getBaseTelemetryAttributes({\n            model,\n            telemetry,\n            headers,\n            settings: {\n                ...settings,\n                maxRetries\n            }\n        });\n        const tracer = getTracer(telemetry);\n        const self = this;\n        const stitchableStream = createStitchableStream();\n        const eventProcessor = new TransformStream({\n            transform (chunk, controller) {\n                controller.enqueue(chunk);\n                if (chunk.type === \"error\") {\n                    onError == null ? void 0 : onError({\n                        error: chunk.error\n                    });\n                }\n            }\n        });\n        this.baseStream = stitchableStream.stream.pipeThrough(eventProcessor);\n        recordSpan({\n            name: \"ai.streamObject\",\n            attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    ...assembleOperationName({\n                        operationId: \"ai.streamObject\",\n                        telemetry\n                    }),\n                    ...baseTelemetryAttributes,\n                    // specific settings that only make sense on the outer level:\n                    \"ai.prompt\": {\n                        input: ()=>JSON.stringify({\n                                system,\n                                prompt,\n                                messages\n                            })\n                    },\n                    \"ai.schema\": outputStrategy.jsonSchema != null ? {\n                        input: ()=>JSON.stringify(outputStrategy.jsonSchema)\n                    } : void 0,\n                    \"ai.schema.name\": schemaName,\n                    \"ai.schema.description\": schemaDescription,\n                    \"ai.settings.output\": outputStrategy.type,\n                    \"ai.settings.mode\": mode\n                }\n            }),\n            tracer,\n            endWhenDone: false,\n            fn: async (rootSpan)=>{\n                var _a17, _b;\n                if (mode === \"auto\" || mode == null) {\n                    mode = model.defaultObjectGenerationMode;\n                }\n                let callOptions;\n                let transformer;\n                switch(mode){\n                    case \"json\":\n                        {\n                            const standardizedPrompt = standardizePrompt({\n                                prompt: {\n                                    system: outputStrategy.jsonSchema == null ? injectJsonInstruction({\n                                        prompt: system\n                                    }) : model.supportsStructuredOutputs ? system : injectJsonInstruction({\n                                        prompt: system,\n                                        schema: outputStrategy.jsonSchema\n                                    }),\n                                    prompt,\n                                    messages\n                                },\n                                tools: void 0\n                            });\n                            callOptions = {\n                                mode: {\n                                    type: \"object-json\",\n                                    schema: outputStrategy.jsonSchema,\n                                    name: schemaName,\n                                    description: schemaDescription\n                                },\n                                ...prepareCallSettings(settings),\n                                inputFormat: standardizedPrompt.type,\n                                prompt: await convertToLanguageModelPrompt({\n                                    prompt: standardizedPrompt,\n                                    modelSupportsImageUrls: model.supportsImageUrls,\n                                    modelSupportsUrl: (_a17 = model.supportsUrl) == null ? void 0 : _a17.bind(model)\n                                }),\n                                providerMetadata: providerOptions,\n                                abortSignal,\n                                headers\n                            };\n                            transformer = {\n                                transform: (chunk, controller)=>{\n                                    switch(chunk.type){\n                                        case \"text-delta\":\n                                            controller.enqueue(chunk.textDelta);\n                                            break;\n                                        case \"response-metadata\":\n                                        case \"finish\":\n                                        case \"error\":\n                                            controller.enqueue(chunk);\n                                            break;\n                                    }\n                                }\n                            };\n                            break;\n                        }\n                    case \"tool\":\n                        {\n                            const standardizedPrompt = standardizePrompt({\n                                prompt: {\n                                    system,\n                                    prompt,\n                                    messages\n                                },\n                                tools: void 0\n                            });\n                            callOptions = {\n                                mode: {\n                                    type: \"object-tool\",\n                                    tool: {\n                                        type: \"function\",\n                                        name: schemaName != null ? schemaName : \"json\",\n                                        description: schemaDescription != null ? schemaDescription : \"Respond with a JSON object.\",\n                                        parameters: outputStrategy.jsonSchema\n                                    }\n                                },\n                                ...prepareCallSettings(settings),\n                                inputFormat: standardizedPrompt.type,\n                                prompt: await convertToLanguageModelPrompt({\n                                    prompt: standardizedPrompt,\n                                    modelSupportsImageUrls: model.supportsImageUrls,\n                                    modelSupportsUrl: (_b = model.supportsUrl) == null ? void 0 : _b.bind(model)\n                                }),\n                                providerMetadata: providerOptions,\n                                abortSignal,\n                                headers\n                            };\n                            transformer = {\n                                transform (chunk, controller) {\n                                    switch(chunk.type){\n                                        case \"tool-call-delta\":\n                                            controller.enqueue(chunk.argsTextDelta);\n                                            break;\n                                        case \"response-metadata\":\n                                        case \"finish\":\n                                        case \"error\":\n                                            controller.enqueue(chunk);\n                                            break;\n                                    }\n                                }\n                            };\n                            break;\n                        }\n                    case void 0:\n                        {\n                            throw new Error(\"Model does not have a default object generation mode.\");\n                        }\n                    default:\n                        {\n                            const _exhaustiveCheck = mode;\n                            throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);\n                        }\n                }\n                const { result: { stream, warnings, rawResponse, request }, doStreamSpan, startTimestampMs } = await retry(()=>recordSpan({\n                        name: \"ai.streamObject.doStream\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.streamObject.doStream\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                \"ai.prompt.format\": {\n                                    input: ()=>callOptions.inputFormat\n                                },\n                                \"ai.prompt.messages\": {\n                                    input: ()=>JSON.stringify(callOptions.prompt)\n                                },\n                                \"ai.settings.mode\": mode,\n                                // standardized gen-ai llm span attributes:\n                                \"gen_ai.system\": model.provider,\n                                \"gen_ai.request.model\": model.modelId,\n                                \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                \"gen_ai.request.temperature\": settings.temperature,\n                                \"gen_ai.request.top_k\": settings.topK,\n                                \"gen_ai.request.top_p\": settings.topP\n                            }\n                        }),\n                        tracer,\n                        endWhenDone: false,\n                        fn: async (doStreamSpan2)=>({\n                                startTimestampMs: now2(),\n                                doStreamSpan: doStreamSpan2,\n                                result: await model.doStream(callOptions)\n                            })\n                    }));\n                self.requestPromise.resolve(request != null ? request : {});\n                let usage;\n                let finishReason;\n                let providerMetadata;\n                let object2;\n                let error;\n                let accumulatedText = \"\";\n                let textDelta = \"\";\n                let response = {\n                    id: generateId3(),\n                    timestamp: currentDate(),\n                    modelId: model.modelId\n                };\n                let latestObjectJson = void 0;\n                let latestObject = void 0;\n                let isFirstChunk = true;\n                let isFirstDelta = true;\n                const transformedStream = stream.pipeThrough(new TransformStream(transformer)).pipeThrough(new TransformStream({\n                    async transform (chunk, controller) {\n                        var _a18, _b2, _c;\n                        if (isFirstChunk) {\n                            const msToFirstChunk = now2() - startTimestampMs;\n                            isFirstChunk = false;\n                            doStreamSpan.addEvent(\"ai.stream.firstChunk\", {\n                                \"ai.stream.msToFirstChunk\": msToFirstChunk\n                            });\n                            doStreamSpan.setAttributes({\n                                \"ai.stream.msToFirstChunk\": msToFirstChunk\n                            });\n                        }\n                        if (typeof chunk === \"string\") {\n                            accumulatedText += chunk;\n                            textDelta += chunk;\n                            const { value: currentObjectJson, state: parseState } = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.parsePartialJson)(accumulatedText);\n                            if (currentObjectJson !== void 0 && !(0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.isDeepEqualData)(latestObjectJson, currentObjectJson)) {\n                                const validationResult = outputStrategy.validatePartialResult({\n                                    value: currentObjectJson,\n                                    textDelta,\n                                    latestObject,\n                                    isFirstDelta,\n                                    isFinalDelta: parseState === \"successful-parse\"\n                                });\n                                if (validationResult.success && !(0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.isDeepEqualData)(latestObject, validationResult.value.partial)) {\n                                    latestObjectJson = currentObjectJson;\n                                    latestObject = validationResult.value.partial;\n                                    controller.enqueue({\n                                        type: \"object\",\n                                        object: latestObject\n                                    });\n                                    controller.enqueue({\n                                        type: \"text-delta\",\n                                        textDelta: validationResult.value.textDelta\n                                    });\n                                    textDelta = \"\";\n                                    isFirstDelta = false;\n                                }\n                            }\n                            return;\n                        }\n                        switch(chunk.type){\n                            case \"response-metadata\":\n                                {\n                                    response = {\n                                        id: (_a18 = chunk.id) != null ? _a18 : response.id,\n                                        timestamp: (_b2 = chunk.timestamp) != null ? _b2 : response.timestamp,\n                                        modelId: (_c = chunk.modelId) != null ? _c : response.modelId\n                                    };\n                                    break;\n                                }\n                            case \"finish\":\n                                {\n                                    if (textDelta !== \"\") {\n                                        controller.enqueue({\n                                            type: \"text-delta\",\n                                            textDelta\n                                        });\n                                    }\n                                    finishReason = chunk.finishReason;\n                                    usage = calculateLanguageModelUsage(chunk.usage);\n                                    providerMetadata = chunk.providerMetadata;\n                                    controller.enqueue({\n                                        ...chunk,\n                                        usage,\n                                        response\n                                    });\n                                    self.usagePromise.resolve(usage);\n                                    self.providerMetadataPromise.resolve(providerMetadata);\n                                    self.responsePromise.resolve({\n                                        ...response,\n                                        headers: rawResponse == null ? void 0 : rawResponse.headers\n                                    });\n                                    const validationResult = outputStrategy.validateFinalResult(latestObjectJson, {\n                                        text: accumulatedText,\n                                        response,\n                                        usage\n                                    });\n                                    if (validationResult.success) {\n                                        object2 = validationResult.value;\n                                        self.objectPromise.resolve(object2);\n                                    } else {\n                                        error = new NoObjectGeneratedError({\n                                            message: \"No object generated: response did not match schema.\",\n                                            cause: validationResult.error,\n                                            text: accumulatedText,\n                                            response,\n                                            usage,\n                                            finishReason\n                                        });\n                                        self.objectPromise.reject(error);\n                                    }\n                                    break;\n                                }\n                            default:\n                                {\n                                    controller.enqueue(chunk);\n                                    break;\n                                }\n                        }\n                    },\n                    // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n                    async flush (controller) {\n                        try {\n                            const finalUsage = usage != null ? usage : {\n                                promptTokens: NaN,\n                                completionTokens: NaN,\n                                totalTokens: NaN\n                            };\n                            doStreamSpan.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.response.finishReason\": finishReason,\n                                    \"ai.response.object\": {\n                                        output: ()=>JSON.stringify(object2)\n                                    },\n                                    \"ai.response.id\": response.id,\n                                    \"ai.response.model\": response.modelId,\n                                    \"ai.response.timestamp\": response.timestamp.toISOString(),\n                                    \"ai.usage.promptTokens\": finalUsage.promptTokens,\n                                    \"ai.usage.completionTokens\": finalUsage.completionTokens,\n                                    // standardized gen-ai llm span attributes:\n                                    \"gen_ai.response.finish_reasons\": [\n                                        finishReason\n                                    ],\n                                    \"gen_ai.response.id\": response.id,\n                                    \"gen_ai.response.model\": response.modelId,\n                                    \"gen_ai.usage.input_tokens\": finalUsage.promptTokens,\n                                    \"gen_ai.usage.output_tokens\": finalUsage.completionTokens\n                                }\n                            }));\n                            doStreamSpan.end();\n                            rootSpan.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.usage.promptTokens\": finalUsage.promptTokens,\n                                    \"ai.usage.completionTokens\": finalUsage.completionTokens,\n                                    \"ai.response.object\": {\n                                        output: ()=>JSON.stringify(object2)\n                                    }\n                                }\n                            }));\n                            await (onFinish == null ? void 0 : onFinish({\n                                usage: finalUsage,\n                                object: object2,\n                                error,\n                                response: {\n                                    ...response,\n                                    headers: rawResponse == null ? void 0 : rawResponse.headers\n                                },\n                                warnings,\n                                providerMetadata,\n                                experimental_providerMetadata: providerMetadata\n                            }));\n                        } catch (error2) {\n                            controller.enqueue({\n                                type: \"error\",\n                                error: error2\n                            });\n                        } finally{\n                            rootSpan.end();\n                        }\n                    }\n                }));\n                stitchableStream.addStream(transformedStream);\n            }\n        }).catch((error)=>{\n            stitchableStream.addStream(new ReadableStream({\n                start (controller) {\n                    controller.enqueue({\n                        type: \"error\",\n                        error\n                    });\n                    controller.close();\n                }\n            }));\n        }).finally(()=>{\n            stitchableStream.close();\n        });\n        this.outputStrategy = outputStrategy;\n    }\n    get object() {\n        return this.objectPromise.value;\n    }\n    get usage() {\n        return this.usagePromise.value;\n    }\n    get experimental_providerMetadata() {\n        return this.providerMetadataPromise.value;\n    }\n    get providerMetadata() {\n        return this.providerMetadataPromise.value;\n    }\n    get warnings() {\n        return this.warningsPromise.value;\n    }\n    get request() {\n        return this.requestPromise.value;\n    }\n    get response() {\n        return this.responsePromise.value;\n    }\n    get partialObjectStream() {\n        return createAsyncIterableStream(this.baseStream.pipeThrough(new TransformStream({\n            transform (chunk, controller) {\n                switch(chunk.type){\n                    case \"object\":\n                        controller.enqueue(chunk.object);\n                        break;\n                    case \"text-delta\":\n                    case \"finish\":\n                    case \"error\":\n                        break;\n                    default:\n                        {\n                            const _exhaustiveCheck = chunk;\n                            throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n                        }\n                }\n            }\n        })));\n    }\n    get elementStream() {\n        return this.outputStrategy.createElementStream(this.baseStream);\n    }\n    get textStream() {\n        return createAsyncIterableStream(this.baseStream.pipeThrough(new TransformStream({\n            transform (chunk, controller) {\n                switch(chunk.type){\n                    case \"text-delta\":\n                        controller.enqueue(chunk.textDelta);\n                        break;\n                    case \"object\":\n                    case \"finish\":\n                    case \"error\":\n                        break;\n                    default:\n                        {\n                            const _exhaustiveCheck = chunk;\n                            throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n                        }\n                }\n            }\n        })));\n    }\n    get fullStream() {\n        return createAsyncIterableStream(this.baseStream);\n    }\n    pipeTextStreamToResponse(response, init) {\n        writeToServerResponse({\n            response,\n            status: init == null ? void 0 : init.status,\n            statusText: init == null ? void 0 : init.statusText,\n            headers: prepareOutgoingHttpHeaders(init == null ? void 0 : init.headers, {\n                contentType: \"text/plain; charset=utf-8\"\n            }),\n            stream: this.textStream.pipeThrough(new TextEncoderStream())\n        });\n    }\n    toTextStreamResponse(init) {\n        var _a17;\n        return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {\n            status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,\n            headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {\n                contentType: \"text/plain; charset=utf-8\"\n            })\n        });\n    }\n};\n// core/generate-text/generate-text.ts\n\n// errors/no-output-specified-error.ts\n\nvar name9 = \"AI_NoOutputSpecifiedError\";\nvar marker9 = `vercel.ai.error.${name9}`;\nvar symbol9 = Symbol.for(marker9);\nvar _a9;\nvar NoOutputSpecifiedError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    // used in isInstance\n    constructor({ message = \"No output specified.\" } = {}){\n        super({\n            name: name9,\n            message\n        });\n        this[_a9] = true;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker9);\n    }\n};\n_a9 = symbol9;\n// errors/tool-execution-error.ts\n\nvar name10 = \"AI_ToolExecutionError\";\nvar marker10 = `vercel.ai.error.${name10}`;\nvar symbol10 = Symbol.for(marker10);\nvar _a10;\nvar ToolExecutionError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ toolArgs, toolName, toolCallId, cause, message = `Error executing tool ${toolName}: ${(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.getErrorMessage)(cause)}` }){\n        super({\n            name: name10,\n            message,\n            cause\n        });\n        this[_a10] = true;\n        this.toolArgs = toolArgs;\n        this.toolName = toolName;\n        this.toolCallId = toolCallId;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker10);\n    }\n};\n_a10 = symbol10;\n// core/prompt/prepare-tools-and-tool-choice.ts\n\n// core/util/is-non-empty-object.ts\nfunction isNonEmptyObject(object2) {\n    return object2 != null && Object.keys(object2).length > 0;\n}\n// core/prompt/prepare-tools-and-tool-choice.ts\nfunction prepareToolsAndToolChoice({ tools, toolChoice, activeTools }) {\n    if (!isNonEmptyObject(tools)) {\n        return {\n            tools: void 0,\n            toolChoice: void 0\n        };\n    }\n    const filteredTools = activeTools != null ? Object.entries(tools).filter(([name17])=>activeTools.includes(name17)) : Object.entries(tools);\n    return {\n        tools: filteredTools.map(([name17, tool2])=>{\n            const toolType = tool2.type;\n            switch(toolType){\n                case void 0:\n                case \"function\":\n                    return {\n                        type: \"function\",\n                        name: name17,\n                        description: tool2.description,\n                        parameters: (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(tool2.parameters).jsonSchema\n                    };\n                case \"provider-defined\":\n                    return {\n                        type: \"provider-defined\",\n                        name: name17,\n                        id: tool2.id,\n                        args: tool2.args\n                    };\n                default:\n                    {\n                        const exhaustiveCheck = toolType;\n                        throw new Error(`Unsupported tool type: ${exhaustiveCheck}`);\n                    }\n            }\n        }),\n        toolChoice: toolChoice == null ? {\n            type: \"auto\"\n        } : typeof toolChoice === \"string\" ? {\n            type: toolChoice\n        } : {\n            type: \"tool\",\n            toolName: toolChoice.toolName\n        }\n    };\n}\n// core/util/split-on-last-whitespace.ts\nvar lastWhitespaceRegexp = /^([\\s\\S]*?)(\\s+)(\\S*)$/;\nfunction splitOnLastWhitespace(text2) {\n    const match = text2.match(lastWhitespaceRegexp);\n    return match ? {\n        prefix: match[1],\n        whitespace: match[2],\n        suffix: match[3]\n    } : void 0;\n}\n// core/util/remove-text-after-last-whitespace.ts\nfunction removeTextAfterLastWhitespace(text2) {\n    const match = splitOnLastWhitespace(text2);\n    return match ? match.prefix + match.whitespace : text2;\n}\n// core/generate-text/parse-tool-call.ts\n\n\n// errors/invalid-tool-arguments-error.ts\n\nvar name11 = \"AI_InvalidToolArgumentsError\";\nvar marker11 = `vercel.ai.error.${name11}`;\nvar symbol11 = Symbol.for(marker11);\nvar _a11;\nvar InvalidToolArgumentsError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ toolArgs, toolName, cause, message = `Invalid arguments for tool ${toolName}: ${(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.getErrorMessage)(cause)}` }){\n        super({\n            name: name11,\n            message,\n            cause\n        });\n        this[_a11] = true;\n        this.toolArgs = toolArgs;\n        this.toolName = toolName;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker11);\n    }\n};\n_a11 = symbol11;\n// errors/no-such-tool-error.ts\n\nvar name12 = \"AI_NoSuchToolError\";\nvar marker12 = `vercel.ai.error.${name12}`;\nvar symbol12 = Symbol.for(marker12);\nvar _a12;\nvar NoSuchToolError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ toolName, availableTools = void 0, message = `Model tried to call unavailable tool '${toolName}'. ${availableTools === void 0 ? \"No tools are available.\" : `Available tools: ${availableTools.join(\", \")}.`}` }){\n        super({\n            name: name12,\n            message\n        });\n        this[_a12] = true;\n        this.toolName = toolName;\n        this.availableTools = availableTools;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker12);\n    }\n};\n_a12 = symbol12;\n// errors/tool-call-repair-error.ts\n\nvar name13 = \"AI_ToolCallRepairError\";\nvar marker13 = `vercel.ai.error.${name13}`;\nvar symbol13 = Symbol.for(marker13);\nvar _a13;\nvar ToolCallRepairError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ cause, originalError, message = `Error repairing tool call: ${(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.getErrorMessage)(cause)}` }){\n        super({\n            name: name13,\n            message,\n            cause\n        });\n        this[_a13] = true;\n        this.originalError = originalError;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker13);\n    }\n};\n_a13 = symbol13;\n// core/generate-text/parse-tool-call.ts\nasync function parseToolCall({ toolCall, tools, repairToolCall, system, messages }) {\n    if (tools == null) {\n        throw new NoSuchToolError({\n            toolName: toolCall.toolName\n        });\n    }\n    try {\n        return await doParseToolCall({\n            toolCall,\n            tools\n        });\n    } catch (error) {\n        if (repairToolCall == null || !(NoSuchToolError.isInstance(error) || InvalidToolArgumentsError.isInstance(error))) {\n            throw error;\n        }\n        let repairedToolCall = null;\n        try {\n            repairedToolCall = await repairToolCall({\n                toolCall,\n                tools,\n                parameterSchema: ({ toolName })=>(0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(tools[toolName].parameters).jsonSchema,\n                system,\n                messages,\n                error\n            });\n        } catch (repairError) {\n            throw new ToolCallRepairError({\n                cause: repairError,\n                originalError: error\n            });\n        }\n        if (repairedToolCall == null) {\n            throw error;\n        }\n        return await doParseToolCall({\n            toolCall: repairedToolCall,\n            tools\n        });\n    }\n}\nasync function doParseToolCall({ toolCall, tools }) {\n    const toolName = toolCall.toolName;\n    const tool2 = tools[toolName];\n    if (tool2 == null) {\n        throw new NoSuchToolError({\n            toolName: toolCall.toolName,\n            availableTools: Object.keys(tools)\n        });\n    }\n    const schema = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(tool2.parameters);\n    const parseResult = toolCall.args.trim() === \"\" ? (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n        value: {},\n        schema\n    }) : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)({\n        text: toolCall.args,\n        schema\n    });\n    if (parseResult.success === false) {\n        throw new InvalidToolArgumentsError({\n            toolName,\n            toolArgs: toolCall.args,\n            cause: parseResult.error\n        });\n    }\n    return {\n        type: \"tool-call\",\n        toolCallId: toolCall.toolCallId,\n        toolName,\n        args: parseResult.value\n    };\n}\n// core/generate-text/reasoning-detail.ts\nfunction asReasoningText(reasoning) {\n    const reasoningText = reasoning.filter((part)=>part.type === \"text\").map((part)=>part.text).join(\"\");\n    return reasoningText.length > 0 ? reasoningText : void 0;\n}\n// core/generate-text/to-response-messages.ts\nfunction toResponseMessages({ text: text2 = \"\", files, reasoning, tools, toolCalls, toolResults, messageId, generateMessageId }) {\n    const responseMessages = [];\n    const content = [];\n    if (reasoning.length > 0) {\n        content.push(...reasoning.map((part)=>part.type === \"text\" ? {\n                ...part,\n                type: \"reasoning\"\n            } : {\n                ...part,\n                type: \"redacted-reasoning\"\n            }));\n    }\n    if (files.length > 0) {\n        content.push(...files.map((file)=>({\n                type: \"file\",\n                data: file.base64,\n                mimeType: file.mimeType\n            })));\n    }\n    if (text2.length > 0) {\n        content.push({\n            type: \"text\",\n            text: text2\n        });\n    }\n    if (toolCalls.length > 0) {\n        content.push(...toolCalls);\n    }\n    if (content.length > 0) {\n        responseMessages.push({\n            role: \"assistant\",\n            content,\n            id: messageId\n        });\n    }\n    if (toolResults.length > 0) {\n        responseMessages.push({\n            role: \"tool\",\n            id: generateMessageId(),\n            content: toolResults.map((toolResult)=>{\n                const tool2 = tools[toolResult.toolName];\n                return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {\n                    type: \"tool-result\",\n                    toolCallId: toolResult.toolCallId,\n                    toolName: toolResult.toolName,\n                    result: tool2.experimental_toToolResultContent(toolResult.result),\n                    experimental_content: tool2.experimental_toToolResultContent(toolResult.result)\n                } : {\n                    type: \"tool-result\",\n                    toolCallId: toolResult.toolCallId,\n                    toolName: toolResult.toolName,\n                    result: toolResult.result\n                };\n            })\n        });\n    }\n    return responseMessages;\n}\n// core/generate-text/generate-text.ts\nvar originalGenerateId3 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator)({\n    prefix: \"aitxt\",\n    size: 24\n});\nvar originalGenerateMessageId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator)({\n    prefix: \"msg\",\n    size: 24\n});\nasync function generateText({ model, tools, toolChoice, system, prompt, messages, maxRetries: maxRetriesArg, abortSignal, headers, maxSteps = 1, experimental_generateMessageId: generateMessageId = originalGenerateMessageId, experimental_output: output, experimental_continueSteps: continueSteps = false, experimental_telemetry: telemetry, experimental_providerMetadata, providerOptions = experimental_providerMetadata, experimental_activeTools: activeTools, experimental_repairToolCall: repairToolCall, _internal: { generateId: generateId3 = originalGenerateId3, currentDate = ()=>/* @__PURE__ */ new Date() } = {}, onStepFinish, ...settings }) {\n    var _a17;\n    if (maxSteps < 1) {\n        throw new InvalidArgumentError({\n            parameter: \"maxSteps\",\n            value: maxSteps,\n            message: \"maxSteps must be at least 1\"\n        });\n    }\n    const { maxRetries, retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            ...settings,\n            maxRetries\n        }\n    });\n    const initialPrompt = standardizePrompt({\n        prompt: {\n            system: (_a17 = output == null ? void 0 : output.injectIntoSystemPrompt({\n                system,\n                model\n            })) != null ? _a17 : system,\n            prompt,\n            messages\n        },\n        tools\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.generateText\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.generateText\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.prompt\": {\n                    input: ()=>JSON.stringify({\n                            system,\n                            prompt,\n                            messages\n                        })\n                },\n                \"ai.settings.maxSteps\": maxSteps\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            var _a18, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;\n            const mode = {\n                type: \"regular\",\n                ...prepareToolsAndToolChoice({\n                    tools,\n                    toolChoice,\n                    activeTools\n                })\n            };\n            const callSettings = prepareCallSettings(settings);\n            let currentModelResponse;\n            let currentToolCalls = [];\n            let currentToolResults = [];\n            let currentReasoningDetails = [];\n            let stepCount = 0;\n            const responseMessages = [];\n            let text2 = \"\";\n            const sources = [];\n            const steps = [];\n            let usage = {\n                completionTokens: 0,\n                promptTokens: 0,\n                totalTokens: 0\n            };\n            let stepType = \"initial\";\n            do {\n                const promptFormat = stepCount === 0 ? initialPrompt.type : \"messages\";\n                const stepInputMessages = [\n                    ...initialPrompt.messages,\n                    ...responseMessages\n                ];\n                const promptMessages = await convertToLanguageModelPrompt({\n                    prompt: {\n                        type: promptFormat,\n                        system: initialPrompt.system,\n                        messages: stepInputMessages\n                    },\n                    modelSupportsImageUrls: model.supportsImageUrls,\n                    modelSupportsUrl: (_a18 = model.supportsUrl) == null ? void 0 : _a18.bind(model)\n                });\n                currentModelResponse = await retry(()=>recordSpan({\n                        name: \"ai.generateText.doGenerate\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.generateText.doGenerate\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                \"ai.prompt.format\": {\n                                    input: ()=>promptFormat\n                                },\n                                \"ai.prompt.messages\": {\n                                    input: ()=>JSON.stringify(promptMessages)\n                                },\n                                \"ai.prompt.tools\": {\n                                    // convert the language model level tools:\n                                    input: ()=>{\n                                        var _a19;\n                                        return (_a19 = mode.tools) == null ? void 0 : _a19.map((tool2)=>JSON.stringify(tool2));\n                                    }\n                                },\n                                \"ai.prompt.toolChoice\": {\n                                    input: ()=>mode.toolChoice != null ? JSON.stringify(mode.toolChoice) : void 0\n                                },\n                                // standardized gen-ai llm span attributes:\n                                \"gen_ai.system\": model.provider,\n                                \"gen_ai.request.model\": model.modelId,\n                                \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                \"gen_ai.request.stop_sequences\": settings.stopSequences,\n                                \"gen_ai.request.temperature\": settings.temperature,\n                                \"gen_ai.request.top_k\": settings.topK,\n                                \"gen_ai.request.top_p\": settings.topP\n                            }\n                        }),\n                        tracer,\n                        fn: async (span2)=>{\n                            var _a19, _b2, _c2, _d2, _e2, _f2;\n                            const result = await model.doGenerate({\n                                mode,\n                                ...callSettings,\n                                inputFormat: promptFormat,\n                                responseFormat: output == null ? void 0 : output.responseFormat({\n                                    model\n                                }),\n                                prompt: promptMessages,\n                                providerMetadata: providerOptions,\n                                abortSignal,\n                                headers\n                            });\n                            const responseData = {\n                                id: (_b2 = (_a19 = result.response) == null ? void 0 : _a19.id) != null ? _b2 : generateId3(),\n                                timestamp: (_d2 = (_c2 = result.response) == null ? void 0 : _c2.timestamp) != null ? _d2 : currentDate(),\n                                modelId: (_f2 = (_e2 = result.response) == null ? void 0 : _e2.modelId) != null ? _f2 : model.modelId\n                            };\n                            span2.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.response.finishReason\": result.finishReason,\n                                    \"ai.response.text\": {\n                                        output: ()=>result.text\n                                    },\n                                    \"ai.response.toolCalls\": {\n                                        output: ()=>JSON.stringify(result.toolCalls)\n                                    },\n                                    \"ai.response.id\": responseData.id,\n                                    \"ai.response.model\": responseData.modelId,\n                                    \"ai.response.timestamp\": responseData.timestamp.toISOString(),\n                                    \"ai.usage.promptTokens\": result.usage.promptTokens,\n                                    \"ai.usage.completionTokens\": result.usage.completionTokens,\n                                    // standardized gen-ai llm span attributes:\n                                    \"gen_ai.response.finish_reasons\": [\n                                        result.finishReason\n                                    ],\n                                    \"gen_ai.response.id\": responseData.id,\n                                    \"gen_ai.response.model\": responseData.modelId,\n                                    \"gen_ai.usage.input_tokens\": result.usage.promptTokens,\n                                    \"gen_ai.usage.output_tokens\": result.usage.completionTokens\n                                }\n                            }));\n                            return {\n                                ...result,\n                                response: responseData\n                            };\n                        }\n                    }));\n                currentToolCalls = await Promise.all(((_b = currentModelResponse.toolCalls) != null ? _b : []).map((toolCall)=>parseToolCall({\n                        toolCall,\n                        tools,\n                        repairToolCall,\n                        system,\n                        messages: stepInputMessages\n                    })));\n                currentToolResults = tools == null ? [] : await executeTools({\n                    toolCalls: currentToolCalls,\n                    tools,\n                    tracer,\n                    telemetry,\n                    messages: stepInputMessages,\n                    abortSignal\n                });\n                const currentUsage = calculateLanguageModelUsage(currentModelResponse.usage);\n                usage = addLanguageModelUsage(usage, currentUsage);\n                let nextStepType = \"done\";\n                if (++stepCount < maxSteps) {\n                    if (continueSteps && currentModelResponse.finishReason === \"length\" && // only use continue when there are no tool calls:\n                    currentToolCalls.length === 0) {\n                        nextStepType = \"continue\";\n                    } else if (// there are tool calls:\n                    currentToolCalls.length > 0 && // all current tool calls have results:\n                    currentToolResults.length === currentToolCalls.length) {\n                        nextStepType = \"tool-result\";\n                    }\n                }\n                const originalText = (_c = currentModelResponse.text) != null ? _c : \"\";\n                const stepTextLeadingWhitespaceTrimmed = stepType === \"continue\" && // only for continue steps\n                text2.trimEnd() !== text2 ? originalText.trimStart() : originalText;\n                const stepText = nextStepType === \"continue\" ? removeTextAfterLastWhitespace(stepTextLeadingWhitespaceTrimmed) : stepTextLeadingWhitespaceTrimmed;\n                text2 = nextStepType === \"continue\" || stepType === \"continue\" ? text2 + stepText : stepText;\n                currentReasoningDetails = asReasoningDetails(currentModelResponse.reasoning);\n                sources.push(...(_d = currentModelResponse.sources) != null ? _d : []);\n                if (stepType === \"continue\") {\n                    const lastMessage = responseMessages[responseMessages.length - 1];\n                    if (typeof lastMessage.content === \"string\") {\n                        lastMessage.content += stepText;\n                    } else {\n                        lastMessage.content.push({\n                            text: stepText,\n                            type: \"text\"\n                        });\n                    }\n                } else {\n                    responseMessages.push(...toResponseMessages({\n                        text: text2,\n                        files: asFiles(currentModelResponse.files),\n                        reasoning: asReasoningDetails(currentModelResponse.reasoning),\n                        tools: tools != null ? tools : {},\n                        toolCalls: currentToolCalls,\n                        toolResults: currentToolResults,\n                        messageId: generateMessageId(),\n                        generateMessageId\n                    }));\n                }\n                const currentStepResult = {\n                    stepType,\n                    text: stepText,\n                    // TODO v5: rename reasoning to reasoningText (and use reasoning for composite array)\n                    reasoning: asReasoningText(currentReasoningDetails),\n                    reasoningDetails: currentReasoningDetails,\n                    files: asFiles(currentModelResponse.files),\n                    sources: (_e = currentModelResponse.sources) != null ? _e : [],\n                    toolCalls: currentToolCalls,\n                    toolResults: currentToolResults,\n                    finishReason: currentModelResponse.finishReason,\n                    usage: currentUsage,\n                    warnings: currentModelResponse.warnings,\n                    logprobs: currentModelResponse.logprobs,\n                    request: (_f = currentModelResponse.request) != null ? _f : {},\n                    response: {\n                        ...currentModelResponse.response,\n                        headers: (_g = currentModelResponse.rawResponse) == null ? void 0 : _g.headers,\n                        body: (_h = currentModelResponse.rawResponse) == null ? void 0 : _h.body,\n                        // deep clone msgs to avoid mutating past messages in multi-step:\n                        messages: structuredClone(responseMessages)\n                    },\n                    providerMetadata: currentModelResponse.providerMetadata,\n                    experimental_providerMetadata: currentModelResponse.providerMetadata,\n                    isContinued: nextStepType === \"continue\"\n                };\n                steps.push(currentStepResult);\n                await (onStepFinish == null ? void 0 : onStepFinish(currentStepResult));\n                stepType = nextStepType;\n            }while (stepType !== \"done\");\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.response.finishReason\": currentModelResponse.finishReason,\n                    \"ai.response.text\": {\n                        output: ()=>currentModelResponse.text\n                    },\n                    \"ai.response.toolCalls\": {\n                        output: ()=>JSON.stringify(currentModelResponse.toolCalls)\n                    },\n                    \"ai.usage.promptTokens\": currentModelResponse.usage.promptTokens,\n                    \"ai.usage.completionTokens\": currentModelResponse.usage.completionTokens\n                }\n            }));\n            return new DefaultGenerateTextResult({\n                text: text2,\n                files: asFiles(currentModelResponse.files),\n                reasoning: asReasoningText(currentReasoningDetails),\n                reasoningDetails: currentReasoningDetails,\n                sources,\n                outputResolver: ()=>{\n                    if (output == null) {\n                        throw new NoOutputSpecifiedError();\n                    }\n                    return output.parseOutput({\n                        text: text2\n                    }, {\n                        response: currentModelResponse.response,\n                        usage,\n                        finishReason: currentModelResponse.finishReason\n                    });\n                },\n                toolCalls: currentToolCalls,\n                toolResults: currentToolResults,\n                finishReason: currentModelResponse.finishReason,\n                usage,\n                warnings: currentModelResponse.warnings,\n                request: (_i = currentModelResponse.request) != null ? _i : {},\n                response: {\n                    ...currentModelResponse.response,\n                    headers: (_j = currentModelResponse.rawResponse) == null ? void 0 : _j.headers,\n                    body: (_k = currentModelResponse.rawResponse) == null ? void 0 : _k.body,\n                    messages: responseMessages\n                },\n                logprobs: currentModelResponse.logprobs,\n                steps,\n                providerMetadata: currentModelResponse.providerMetadata\n            });\n        }\n    });\n}\nasync function executeTools({ toolCalls, tools, tracer, telemetry, messages, abortSignal }) {\n    const toolResults = await Promise.all(toolCalls.map(async ({ toolCallId, toolName, args })=>{\n        const tool2 = tools[toolName];\n        if ((tool2 == null ? void 0 : tool2.execute) == null) {\n            return void 0;\n        }\n        const result = await recordSpan({\n            name: \"ai.toolCall\",\n            attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    ...assembleOperationName({\n                        operationId: \"ai.toolCall\",\n                        telemetry\n                    }),\n                    \"ai.toolCall.name\": toolName,\n                    \"ai.toolCall.id\": toolCallId,\n                    \"ai.toolCall.args\": {\n                        output: ()=>JSON.stringify(args)\n                    }\n                }\n            }),\n            tracer,\n            fn: async (span)=>{\n                try {\n                    const result2 = await tool2.execute(args, {\n                        toolCallId,\n                        messages,\n                        abortSignal\n                    });\n                    try {\n                        span.setAttributes(selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                \"ai.toolCall.result\": {\n                                    output: ()=>JSON.stringify(result2)\n                                }\n                            }\n                        }));\n                    } catch (ignored) {}\n                    return result2;\n                } catch (error) {\n                    throw new ToolExecutionError({\n                        toolCallId,\n                        toolName,\n                        toolArgs: args,\n                        cause: error\n                    });\n                }\n            }\n        });\n        return {\n            type: \"tool-result\",\n            toolCallId,\n            toolName,\n            args,\n            result\n        };\n    }));\n    return toolResults.filter((result)=>result != null);\n}\nvar DefaultGenerateTextResult = class {\n    constructor(options){\n        this.text = options.text;\n        this.files = options.files;\n        this.reasoning = options.reasoning;\n        this.reasoningDetails = options.reasoningDetails;\n        this.toolCalls = options.toolCalls;\n        this.toolResults = options.toolResults;\n        this.finishReason = options.finishReason;\n        this.usage = options.usage;\n        this.warnings = options.warnings;\n        this.request = options.request;\n        this.response = options.response;\n        this.steps = options.steps;\n        this.experimental_providerMetadata = options.providerMetadata;\n        this.providerMetadata = options.providerMetadata;\n        this.logprobs = options.logprobs;\n        this.outputResolver = options.outputResolver;\n        this.sources = options.sources;\n    }\n    get experimental_output() {\n        return this.outputResolver();\n    }\n};\nfunction asReasoningDetails(reasoning) {\n    if (reasoning == null) {\n        return [];\n    }\n    if (typeof reasoning === \"string\") {\n        return [\n            {\n                type: \"text\",\n                text: reasoning\n            }\n        ];\n    }\n    return reasoning;\n}\nfunction asFiles(files) {\n    var _a17;\n    return (_a17 = files == null ? void 0 : files.map((file)=>new DefaultGeneratedFile(file))) != null ? _a17 : [];\n}\n// core/generate-text/output.ts\nvar output_exports = {};\n__export(output_exports, {\n    object: ()=>object,\n    text: ()=>text\n});\n\n\n// errors/index.ts\n\n// errors/invalid-stream-part-error.ts\n\nvar name14 = \"AI_InvalidStreamPartError\";\nvar marker14 = `vercel.ai.error.${name14}`;\nvar symbol14 = Symbol.for(marker14);\nvar _a14;\nvar InvalidStreamPartError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ chunk, message }){\n        super({\n            name: name14,\n            message\n        });\n        this[_a14] = true;\n        this.chunk = chunk;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker14);\n    }\n};\n_a14 = symbol14;\n// errors/mcp-client-error.ts\n\nvar name15 = \"AI_MCPClientError\";\nvar marker15 = `vercel.ai.error.${name15}`;\nvar symbol15 = Symbol.for(marker15);\nvar _a15;\nvar MCPClientError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ name: name17 = \"MCPClientError\", message, cause }){\n        super({\n            name: name17,\n            message,\n            cause\n        });\n        this[_a15] = true;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker15);\n    }\n};\n_a15 = symbol15;\n// core/generate-text/output.ts\nvar text = ()=>({\n        type: \"text\",\n        responseFormat: ()=>({\n                type: \"text\"\n            }),\n        injectIntoSystemPrompt ({ system }) {\n            return system;\n        },\n        parsePartial ({ text: text2 }) {\n            return {\n                partial: text2\n            };\n        },\n        parseOutput ({ text: text2 }) {\n            return text2;\n        }\n    });\nvar object = ({ schema: inputSchema })=>{\n    const schema = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(inputSchema);\n    return {\n        type: \"object\",\n        responseFormat: ({ model })=>({\n                type: \"json\",\n                schema: model.supportsStructuredOutputs ? schema.jsonSchema : void 0\n            }),\n        injectIntoSystemPrompt ({ system, model }) {\n            return model.supportsStructuredOutputs ? system : injectJsonInstruction({\n                prompt: system,\n                schema: schema.jsonSchema\n            });\n        },\n        parsePartial ({ text: text2 }) {\n            const result = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.parsePartialJson)(text2);\n            switch(result.state){\n                case \"failed-parse\":\n                case \"undefined-input\":\n                    return void 0;\n                case \"repaired-parse\":\n                case \"successful-parse\":\n                    return {\n                        // Note: currently no validation of partial results:\n                        partial: result.value\n                    };\n                default:\n                    {\n                        const _exhaustiveCheck = result.state;\n                        throw new Error(`Unsupported parse state: ${_exhaustiveCheck}`);\n                    }\n            }\n        },\n        parseOutput ({ text: text2 }, context) {\n            const parseResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)({\n                text: text2\n            });\n            if (!parseResult.success) {\n                throw new NoObjectGeneratedError({\n                    message: \"No object generated: could not parse the response.\",\n                    cause: parseResult.error,\n                    text: text2,\n                    response: context.response,\n                    usage: context.usage,\n                    finishReason: context.finishReason\n                });\n            }\n            const validationResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n                value: parseResult.value,\n                schema\n            });\n            if (!validationResult.success) {\n                throw new NoObjectGeneratedError({\n                    message: \"No object generated: response did not match schema.\",\n                    cause: validationResult.error,\n                    text: text2,\n                    response: context.response,\n                    usage: context.usage,\n                    finishReason: context.finishReason\n                });\n            }\n            return validationResult.value;\n        }\n    };\n};\n// core/generate-text/smooth-stream.ts\n\n\nvar CHUNKING_REGEXPS = {\n    word: /\\S+\\s+/m,\n    line: /\\n+/m\n};\nfunction smoothStream({ delayInMs = 10, chunking = \"word\", _internal: { delay: delay2 = _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.delay } = {} } = {}) {\n    let detectChunk;\n    if (typeof chunking === \"function\") {\n        detectChunk = (buffer)=>{\n            const match = chunking(buffer);\n            if (match == null) {\n                return null;\n            }\n            if (!match.length) {\n                throw new Error(`Chunking function must return a non-empty string.`);\n            }\n            if (!buffer.startsWith(match)) {\n                throw new Error(`Chunking function must return a match that is a prefix of the buffer. Received: \"${match}\" expected to start with \"${buffer}\"`);\n            }\n            return match;\n        };\n    } else {\n        const chunkingRegex = typeof chunking === \"string\" ? CHUNKING_REGEXPS[chunking] : chunking;\n        if (chunkingRegex == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n                argument: \"chunking\",\n                message: `Chunking must be \"word\" or \"line\" or a RegExp. Received: ${chunking}`\n            });\n        }\n        detectChunk = (buffer)=>{\n            const match = chunkingRegex.exec(buffer);\n            if (!match) {\n                return null;\n            }\n            return buffer.slice(0, match.index) + (match == null ? void 0 : match[0]);\n        };\n    }\n    return ()=>{\n        let buffer = \"\";\n        return new TransformStream({\n            async transform (chunk, controller) {\n                if (chunk.type !== \"text-delta\") {\n                    if (buffer.length > 0) {\n                        controller.enqueue({\n                            type: \"text-delta\",\n                            textDelta: buffer\n                        });\n                        buffer = \"\";\n                    }\n                    controller.enqueue(chunk);\n                    return;\n                }\n                buffer += chunk.textDelta;\n                let match;\n                while((match = detectChunk(buffer)) != null){\n                    controller.enqueue({\n                        type: \"text-delta\",\n                        textDelta: match\n                    });\n                    buffer = buffer.slice(match.length);\n                    await delay2(delayInMs);\n                }\n            }\n        });\n    };\n}\n// core/generate-text/stream-text.ts\n\n\n\n// util/as-array.ts\nfunction asArray(value) {\n    return value === void 0 ? [] : Array.isArray(value) ? value : [\n        value\n    ];\n}\n// util/consume-stream.ts\nasync function consumeStream({ stream, onError }) {\n    const reader = stream.getReader();\n    try {\n        while(true){\n            const { done } = await reader.read();\n            if (done) break;\n        }\n    } catch (error) {\n        onError == null ? void 0 : onError(error);\n    } finally{\n        reader.releaseLock();\n    }\n}\n// core/util/merge-streams.ts\nfunction mergeStreams(stream1, stream2) {\n    const reader1 = stream1.getReader();\n    const reader2 = stream2.getReader();\n    let lastRead1 = void 0;\n    let lastRead2 = void 0;\n    let stream1Done = false;\n    let stream2Done = false;\n    async function readStream1(controller) {\n        try {\n            if (lastRead1 == null) {\n                lastRead1 = reader1.read();\n            }\n            const result = await lastRead1;\n            lastRead1 = void 0;\n            if (!result.done) {\n                controller.enqueue(result.value);\n            } else {\n                controller.close();\n            }\n        } catch (error) {\n            controller.error(error);\n        }\n    }\n    async function readStream2(controller) {\n        try {\n            if (lastRead2 == null) {\n                lastRead2 = reader2.read();\n            }\n            const result = await lastRead2;\n            lastRead2 = void 0;\n            if (!result.done) {\n                controller.enqueue(result.value);\n            } else {\n                controller.close();\n            }\n        } catch (error) {\n            controller.error(error);\n        }\n    }\n    return new ReadableStream({\n        async pull (controller) {\n            try {\n                if (stream1Done) {\n                    await readStream2(controller);\n                    return;\n                }\n                if (stream2Done) {\n                    await readStream1(controller);\n                    return;\n                }\n                if (lastRead1 == null) {\n                    lastRead1 = reader1.read();\n                }\n                if (lastRead2 == null) {\n                    lastRead2 = reader2.read();\n                }\n                const { result, reader } = await Promise.race([\n                    lastRead1.then((result2)=>({\n                            result: result2,\n                            reader: reader1\n                        })),\n                    lastRead2.then((result2)=>({\n                            result: result2,\n                            reader: reader2\n                        }))\n                ]);\n                if (!result.done) {\n                    controller.enqueue(result.value);\n                }\n                if (reader === reader1) {\n                    lastRead1 = void 0;\n                    if (result.done) {\n                        await readStream2(controller);\n                        stream1Done = true;\n                    }\n                } else {\n                    lastRead2 = void 0;\n                    if (result.done) {\n                        stream2Done = true;\n                        await readStream1(controller);\n                    }\n                }\n            } catch (error) {\n                controller.error(error);\n            }\n        },\n        cancel () {\n            reader1.cancel();\n            reader2.cancel();\n        }\n    });\n}\n// core/generate-text/run-tools-transformation.ts\n\nfunction runToolsTransformation({ tools, generatorStream, toolCallStreaming, tracer, telemetry, system, messages, abortSignal, repairToolCall }) {\n    let toolResultsStreamController = null;\n    const toolResultsStream = new ReadableStream({\n        start (controller) {\n            toolResultsStreamController = controller;\n        }\n    });\n    const activeToolCalls = {};\n    const outstandingToolResults = /* @__PURE__ */ new Set();\n    let canClose = false;\n    let finishChunk = void 0;\n    function attemptClose() {\n        if (canClose && outstandingToolResults.size === 0) {\n            if (finishChunk != null) {\n                toolResultsStreamController.enqueue(finishChunk);\n            }\n            toolResultsStreamController.close();\n        }\n    }\n    const forwardStream = new TransformStream({\n        async transform (chunk, controller) {\n            const chunkType = chunk.type;\n            switch(chunkType){\n                case \"text-delta\":\n                case \"reasoning\":\n                case \"reasoning-signature\":\n                case \"redacted-reasoning\":\n                case \"source\":\n                case \"response-metadata\":\n                case \"error\":\n                    {\n                        controller.enqueue(chunk);\n                        break;\n                    }\n                case \"file\":\n                    {\n                        controller.enqueue(new DefaultGeneratedFileWithType({\n                            data: chunk.data,\n                            mimeType: chunk.mimeType\n                        }));\n                        break;\n                    }\n                case \"tool-call-delta\":\n                    {\n                        if (toolCallStreaming) {\n                            if (!activeToolCalls[chunk.toolCallId]) {\n                                controller.enqueue({\n                                    type: \"tool-call-streaming-start\",\n                                    toolCallId: chunk.toolCallId,\n                                    toolName: chunk.toolName\n                                });\n                                activeToolCalls[chunk.toolCallId] = true;\n                            }\n                            controller.enqueue({\n                                type: \"tool-call-delta\",\n                                toolCallId: chunk.toolCallId,\n                                toolName: chunk.toolName,\n                                argsTextDelta: chunk.argsTextDelta\n                            });\n                        }\n                        break;\n                    }\n                case \"tool-call\":\n                    {\n                        try {\n                            const toolCall = await parseToolCall({\n                                toolCall: chunk,\n                                tools,\n                                repairToolCall,\n                                system,\n                                messages\n                            });\n                            controller.enqueue(toolCall);\n                            const tool2 = tools[toolCall.toolName];\n                            if (tool2.execute != null) {\n                                const toolExecutionId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.generateId)();\n                                outstandingToolResults.add(toolExecutionId);\n                                recordSpan({\n                                    name: \"ai.toolCall\",\n                                    attributes: selectTelemetryAttributes({\n                                        telemetry,\n                                        attributes: {\n                                            ...assembleOperationName({\n                                                operationId: \"ai.toolCall\",\n                                                telemetry\n                                            }),\n                                            \"ai.toolCall.name\": toolCall.toolName,\n                                            \"ai.toolCall.id\": toolCall.toolCallId,\n                                            \"ai.toolCall.args\": {\n                                                output: ()=>JSON.stringify(toolCall.args)\n                                            }\n                                        }\n                                    }),\n                                    tracer,\n                                    fn: async (span)=>tool2.execute(toolCall.args, {\n                                            toolCallId: toolCall.toolCallId,\n                                            messages,\n                                            abortSignal\n                                        }).then((result)=>{\n                                            toolResultsStreamController.enqueue({\n                                                ...toolCall,\n                                                type: \"tool-result\",\n                                                result\n                                            });\n                                            outstandingToolResults.delete(toolExecutionId);\n                                            attemptClose();\n                                            try {\n                                                span.setAttributes(selectTelemetryAttributes({\n                                                    telemetry,\n                                                    attributes: {\n                                                        \"ai.toolCall.result\": {\n                                                            output: ()=>JSON.stringify(result)\n                                                        }\n                                                    }\n                                                }));\n                                            } catch (ignored) {}\n                                        }, (error)=>{\n                                            toolResultsStreamController.enqueue({\n                                                type: \"error\",\n                                                error: new ToolExecutionError({\n                                                    toolCallId: toolCall.toolCallId,\n                                                    toolName: toolCall.toolName,\n                                                    toolArgs: toolCall.args,\n                                                    cause: error\n                                                })\n                                            });\n                                            outstandingToolResults.delete(toolExecutionId);\n                                            attemptClose();\n                                        })\n                                });\n                            }\n                        } catch (error) {\n                            toolResultsStreamController.enqueue({\n                                type: \"error\",\n                                error\n                            });\n                        }\n                        break;\n                    }\n                case \"finish\":\n                    {\n                        finishChunk = {\n                            type: \"finish\",\n                            finishReason: chunk.finishReason,\n                            logprobs: chunk.logprobs,\n                            usage: calculateLanguageModelUsage(chunk.usage),\n                            experimental_providerMetadata: chunk.providerMetadata\n                        };\n                        break;\n                    }\n                default:\n                    {\n                        const _exhaustiveCheck = chunkType;\n                        throw new Error(`Unhandled chunk type: ${_exhaustiveCheck}`);\n                    }\n            }\n        },\n        flush () {\n            canClose = true;\n            attemptClose();\n        }\n    });\n    return new ReadableStream({\n        async start (controller) {\n            return Promise.all([\n                generatorStream.pipeThrough(forwardStream).pipeTo(new WritableStream({\n                    write (chunk) {\n                        controller.enqueue(chunk);\n                    },\n                    close () {}\n                })),\n                toolResultsStream.pipeTo(new WritableStream({\n                    write (chunk) {\n                        controller.enqueue(chunk);\n                    },\n                    close () {\n                        controller.close();\n                    }\n                }))\n            ]);\n        }\n    });\n}\n// core/generate-text/stream-text.ts\nvar originalGenerateId4 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator)({\n    prefix: \"aitxt\",\n    size: 24\n});\nvar originalGenerateMessageId2 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator)({\n    prefix: \"msg\",\n    size: 24\n});\nfunction streamText({ model, tools, toolChoice, system, prompt, messages, maxRetries, abortSignal, headers, maxSteps = 1, experimental_generateMessageId: generateMessageId = originalGenerateMessageId2, experimental_output: output, experimental_continueSteps: continueSteps = false, experimental_telemetry: telemetry, experimental_providerMetadata, providerOptions = experimental_providerMetadata, experimental_toolCallStreaming = false, toolCallStreaming = experimental_toolCallStreaming, experimental_activeTools: activeTools, experimental_repairToolCall: repairToolCall, experimental_transform: transform, onChunk, onError, onFinish, onStepFinish, _internal: { now: now2 = now, generateId: generateId3 = originalGenerateId4, currentDate = ()=>/* @__PURE__ */ new Date() } = {}, ...settings }) {\n    return new DefaultStreamTextResult({\n        model,\n        telemetry,\n        headers,\n        settings,\n        maxRetries,\n        abortSignal,\n        system,\n        prompt,\n        messages,\n        tools,\n        toolChoice,\n        toolCallStreaming,\n        transforms: asArray(transform),\n        activeTools,\n        repairToolCall,\n        maxSteps,\n        output,\n        continueSteps,\n        providerOptions,\n        onChunk,\n        onError,\n        onFinish,\n        onStepFinish,\n        now: now2,\n        currentDate,\n        generateId: generateId3,\n        generateMessageId\n    });\n}\nfunction createOutputTransformStream(output) {\n    if (!output) {\n        return new TransformStream({\n            transform (chunk, controller) {\n                controller.enqueue({\n                    part: chunk,\n                    partialOutput: void 0\n                });\n            }\n        });\n    }\n    let text2 = \"\";\n    let textChunk = \"\";\n    let lastPublishedJson = \"\";\n    function publishTextChunk({ controller, partialOutput = void 0 }) {\n        controller.enqueue({\n            part: {\n                type: \"text-delta\",\n                textDelta: textChunk\n            },\n            partialOutput\n        });\n        textChunk = \"\";\n    }\n    return new TransformStream({\n        transform (chunk, controller) {\n            if (chunk.type === \"step-finish\") {\n                publishTextChunk({\n                    controller\n                });\n            }\n            if (chunk.type !== \"text-delta\") {\n                controller.enqueue({\n                    part: chunk,\n                    partialOutput: void 0\n                });\n                return;\n            }\n            text2 += chunk.textDelta;\n            textChunk += chunk.textDelta;\n            const result = output.parsePartial({\n                text: text2\n            });\n            if (result != null) {\n                const currentJson = JSON.stringify(result.partial);\n                if (currentJson !== lastPublishedJson) {\n                    publishTextChunk({\n                        controller,\n                        partialOutput: result.partial\n                    });\n                    lastPublishedJson = currentJson;\n                }\n            }\n        },\n        flush (controller) {\n            if (textChunk.length > 0) {\n                publishTextChunk({\n                    controller\n                });\n            }\n        }\n    });\n}\nvar DefaultStreamTextResult = class {\n    constructor({ model, telemetry, headers, settings, maxRetries: maxRetriesArg, abortSignal, system, prompt, messages, tools, toolChoice, toolCallStreaming, transforms, activeTools, repairToolCall, maxSteps, output, continueSteps, providerOptions, now: now2, currentDate, generateId: generateId3, generateMessageId, onChunk, onError, onFinish, onStepFinish }){\n        this.warningsPromise = new DelayedPromise();\n        this.usagePromise = new DelayedPromise();\n        this.finishReasonPromise = new DelayedPromise();\n        this.providerMetadataPromise = new DelayedPromise();\n        this.textPromise = new DelayedPromise();\n        this.reasoningPromise = new DelayedPromise();\n        this.reasoningDetailsPromise = new DelayedPromise();\n        this.sourcesPromise = new DelayedPromise();\n        this.filesPromise = new DelayedPromise();\n        this.toolCallsPromise = new DelayedPromise();\n        this.toolResultsPromise = new DelayedPromise();\n        this.requestPromise = new DelayedPromise();\n        this.responsePromise = new DelayedPromise();\n        this.stepsPromise = new DelayedPromise();\n        var _a17;\n        if (maxSteps < 1) {\n            throw new InvalidArgumentError({\n                parameter: \"maxSteps\",\n                value: maxSteps,\n                message: \"maxSteps must be at least 1\"\n            });\n        }\n        this.output = output;\n        let recordedStepText = \"\";\n        let recordedContinuationText = \"\";\n        let recordedFullText = \"\";\n        let stepReasoning = [];\n        let stepFiles = [];\n        let activeReasoningText = void 0;\n        let recordedStepSources = [];\n        const recordedSources = [];\n        const recordedResponse = {\n            id: generateId3(),\n            timestamp: currentDate(),\n            modelId: model.modelId,\n            messages: []\n        };\n        let recordedToolCalls = [];\n        let recordedToolResults = [];\n        let recordedFinishReason = void 0;\n        let recordedUsage = void 0;\n        let stepType = \"initial\";\n        const recordedSteps = [];\n        let rootSpan;\n        const eventProcessor = new TransformStream({\n            async transform (chunk, controller) {\n                controller.enqueue(chunk);\n                const { part } = chunk;\n                if (part.type === \"text-delta\" || part.type === \"reasoning\" || part.type === \"source\" || part.type === \"tool-call\" || part.type === \"tool-result\" || part.type === \"tool-call-streaming-start\" || part.type === \"tool-call-delta\") {\n                    await (onChunk == null ? void 0 : onChunk({\n                        chunk: part\n                    }));\n                }\n                if (part.type === \"error\") {\n                    await (onError == null ? void 0 : onError({\n                        error: part.error\n                    }));\n                }\n                if (part.type === \"text-delta\") {\n                    recordedStepText += part.textDelta;\n                    recordedContinuationText += part.textDelta;\n                    recordedFullText += part.textDelta;\n                }\n                if (part.type === \"reasoning\") {\n                    if (activeReasoningText == null) {\n                        activeReasoningText = {\n                            type: \"text\",\n                            text: part.textDelta\n                        };\n                        stepReasoning.push(activeReasoningText);\n                    } else {\n                        activeReasoningText.text += part.textDelta;\n                    }\n                }\n                if (part.type === \"reasoning-signature\") {\n                    if (activeReasoningText == null) {\n                        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError({\n                            name: \"InvalidStreamPart\",\n                            message: \"reasoning-signature without reasoning\"\n                        });\n                    }\n                    activeReasoningText.signature = part.signature;\n                    activeReasoningText = void 0;\n                }\n                if (part.type === \"redacted-reasoning\") {\n                    stepReasoning.push({\n                        type: \"redacted\",\n                        data: part.data\n                    });\n                }\n                if (part.type === \"file\") {\n                    stepFiles.push(part);\n                }\n                if (part.type === \"source\") {\n                    recordedSources.push(part.source);\n                    recordedStepSources.push(part.source);\n                }\n                if (part.type === \"tool-call\") {\n                    recordedToolCalls.push(part);\n                }\n                if (part.type === \"tool-result\") {\n                    recordedToolResults.push(part);\n                }\n                if (part.type === \"step-finish\") {\n                    const stepMessages = toResponseMessages({\n                        text: recordedContinuationText,\n                        files: stepFiles,\n                        reasoning: stepReasoning,\n                        tools: tools != null ? tools : {},\n                        toolCalls: recordedToolCalls,\n                        toolResults: recordedToolResults,\n                        messageId: part.messageId,\n                        generateMessageId\n                    });\n                    const currentStep = recordedSteps.length;\n                    let nextStepType = \"done\";\n                    if (currentStep + 1 < maxSteps) {\n                        if (continueSteps && part.finishReason === \"length\" && // only use continue when there are no tool calls:\n                        recordedToolCalls.length === 0) {\n                            nextStepType = \"continue\";\n                        } else if (// there are tool calls:\n                        recordedToolCalls.length > 0 && // all current tool calls have results:\n                        recordedToolResults.length === recordedToolCalls.length) {\n                            nextStepType = \"tool-result\";\n                        }\n                    }\n                    const currentStepResult = {\n                        stepType,\n                        text: recordedStepText,\n                        reasoning: asReasoningText(stepReasoning),\n                        reasoningDetails: stepReasoning,\n                        files: stepFiles,\n                        sources: recordedStepSources,\n                        toolCalls: recordedToolCalls,\n                        toolResults: recordedToolResults,\n                        finishReason: part.finishReason,\n                        usage: part.usage,\n                        warnings: part.warnings,\n                        logprobs: part.logprobs,\n                        request: part.request,\n                        response: {\n                            ...part.response,\n                            messages: [\n                                ...recordedResponse.messages,\n                                ...stepMessages\n                            ]\n                        },\n                        providerMetadata: part.experimental_providerMetadata,\n                        experimental_providerMetadata: part.experimental_providerMetadata,\n                        isContinued: part.isContinued\n                    };\n                    await (onStepFinish == null ? void 0 : onStepFinish(currentStepResult));\n                    recordedSteps.push(currentStepResult);\n                    recordedToolCalls = [];\n                    recordedToolResults = [];\n                    recordedStepText = \"\";\n                    recordedStepSources = [];\n                    stepReasoning = [];\n                    stepFiles = [];\n                    activeReasoningText = void 0;\n                    if (nextStepType !== \"done\") {\n                        stepType = nextStepType;\n                    }\n                    if (nextStepType !== \"continue\") {\n                        recordedResponse.messages.push(...stepMessages);\n                        recordedContinuationText = \"\";\n                    }\n                }\n                if (part.type === \"finish\") {\n                    recordedResponse.id = part.response.id;\n                    recordedResponse.timestamp = part.response.timestamp;\n                    recordedResponse.modelId = part.response.modelId;\n                    recordedResponse.headers = part.response.headers;\n                    recordedUsage = part.usage;\n                    recordedFinishReason = part.finishReason;\n                }\n            },\n            async flush (controller) {\n                var _a18;\n                try {\n                    if (recordedSteps.length === 0) {\n                        return;\n                    }\n                    const lastStep = recordedSteps[recordedSteps.length - 1];\n                    self.warningsPromise.resolve(lastStep.warnings);\n                    self.requestPromise.resolve(lastStep.request);\n                    self.responsePromise.resolve(lastStep.response);\n                    self.toolCallsPromise.resolve(lastStep.toolCalls);\n                    self.toolResultsPromise.resolve(lastStep.toolResults);\n                    self.providerMetadataPromise.resolve(lastStep.experimental_providerMetadata);\n                    self.reasoningPromise.resolve(lastStep.reasoning);\n                    self.reasoningDetailsPromise.resolve(lastStep.reasoningDetails);\n                    const finishReason = recordedFinishReason != null ? recordedFinishReason : \"unknown\";\n                    const usage = recordedUsage != null ? recordedUsage : {\n                        completionTokens: NaN,\n                        promptTokens: NaN,\n                        totalTokens: NaN\n                    };\n                    self.finishReasonPromise.resolve(finishReason);\n                    self.usagePromise.resolve(usage);\n                    self.textPromise.resolve(recordedFullText);\n                    self.sourcesPromise.resolve(recordedSources);\n                    self.filesPromise.resolve(lastStep.files);\n                    self.stepsPromise.resolve(recordedSteps);\n                    await (onFinish == null ? void 0 : onFinish({\n                        finishReason,\n                        logprobs: void 0,\n                        usage,\n                        text: recordedFullText,\n                        reasoning: lastStep.reasoning,\n                        reasoningDetails: lastStep.reasoningDetails,\n                        files: lastStep.files,\n                        sources: lastStep.sources,\n                        toolCalls: lastStep.toolCalls,\n                        toolResults: lastStep.toolResults,\n                        request: (_a18 = lastStep.request) != null ? _a18 : {},\n                        response: lastStep.response,\n                        warnings: lastStep.warnings,\n                        providerMetadata: lastStep.providerMetadata,\n                        experimental_providerMetadata: lastStep.experimental_providerMetadata,\n                        steps: recordedSteps\n                    }));\n                    rootSpan.setAttributes(selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                            \"ai.response.finishReason\": finishReason,\n                            \"ai.response.text\": {\n                                output: ()=>recordedFullText\n                            },\n                            \"ai.response.toolCalls\": {\n                                output: ()=>{\n                                    var _a19;\n                                    return ((_a19 = lastStep.toolCalls) == null ? void 0 : _a19.length) ? JSON.stringify(lastStep.toolCalls) : void 0;\n                                }\n                            },\n                            \"ai.usage.promptTokens\": usage.promptTokens,\n                            \"ai.usage.completionTokens\": usage.completionTokens\n                        }\n                    }));\n                } catch (error) {\n                    controller.error(error);\n                } finally{\n                    rootSpan.end();\n                }\n            }\n        });\n        const stitchableStream = createStitchableStream();\n        this.addStream = stitchableStream.addStream;\n        this.closeStream = stitchableStream.close;\n        let stream = stitchableStream.stream;\n        for (const transform of transforms){\n            stream = stream.pipeThrough(transform({\n                tools,\n                stopStream () {\n                    stitchableStream.terminate();\n                }\n            }));\n        }\n        this.baseStream = stream.pipeThrough(createOutputTransformStream(output)).pipeThrough(eventProcessor);\n        const { maxRetries, retry } = prepareRetries({\n            maxRetries: maxRetriesArg\n        });\n        const tracer = getTracer(telemetry);\n        const baseTelemetryAttributes = getBaseTelemetryAttributes({\n            model,\n            telemetry,\n            headers,\n            settings: {\n                ...settings,\n                maxRetries\n            }\n        });\n        const initialPrompt = standardizePrompt({\n            prompt: {\n                system: (_a17 = output == null ? void 0 : output.injectIntoSystemPrompt({\n                    system,\n                    model\n                })) != null ? _a17 : system,\n                prompt,\n                messages\n            },\n            tools\n        });\n        const self = this;\n        recordSpan({\n            name: \"ai.streamText\",\n            attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    ...assembleOperationName({\n                        operationId: \"ai.streamText\",\n                        telemetry\n                    }),\n                    ...baseTelemetryAttributes,\n                    // specific settings that only make sense on the outer level:\n                    \"ai.prompt\": {\n                        input: ()=>JSON.stringify({\n                                system,\n                                prompt,\n                                messages\n                            })\n                    },\n                    \"ai.settings.maxSteps\": maxSteps\n                }\n            }),\n            tracer,\n            endWhenDone: false,\n            fn: async (rootSpanArg)=>{\n                rootSpan = rootSpanArg;\n                async function streamStep({ currentStep, responseMessages, usage, stepType: stepType2, previousStepText, hasLeadingWhitespace, messageId }) {\n                    var _a18;\n                    const promptFormat = responseMessages.length === 0 ? initialPrompt.type : \"messages\";\n                    const stepInputMessages = [\n                        ...initialPrompt.messages,\n                        ...responseMessages\n                    ];\n                    const promptMessages = await convertToLanguageModelPrompt({\n                        prompt: {\n                            type: promptFormat,\n                            system: initialPrompt.system,\n                            messages: stepInputMessages\n                        },\n                        modelSupportsImageUrls: model.supportsImageUrls,\n                        modelSupportsUrl: (_a18 = model.supportsUrl) == null ? void 0 : _a18.bind(model)\n                    });\n                    const mode = {\n                        type: \"regular\",\n                        ...prepareToolsAndToolChoice({\n                            tools,\n                            toolChoice,\n                            activeTools\n                        })\n                    };\n                    const { result: { stream: stream2, warnings, rawResponse, request }, doStreamSpan, startTimestampMs } = await retry(()=>recordSpan({\n                            name: \"ai.streamText.doStream\",\n                            attributes: selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    ...assembleOperationName({\n                                        operationId: \"ai.streamText.doStream\",\n                                        telemetry\n                                    }),\n                                    ...baseTelemetryAttributes,\n                                    \"ai.prompt.format\": {\n                                        input: ()=>promptFormat\n                                    },\n                                    \"ai.prompt.messages\": {\n                                        input: ()=>JSON.stringify(promptMessages)\n                                    },\n                                    \"ai.prompt.tools\": {\n                                        // convert the language model level tools:\n                                        input: ()=>{\n                                            var _a19;\n                                            return (_a19 = mode.tools) == null ? void 0 : _a19.map((tool2)=>JSON.stringify(tool2));\n                                        }\n                                    },\n                                    \"ai.prompt.toolChoice\": {\n                                        input: ()=>mode.toolChoice != null ? JSON.stringify(mode.toolChoice) : void 0\n                                    },\n                                    // standardized gen-ai llm span attributes:\n                                    \"gen_ai.system\": model.provider,\n                                    \"gen_ai.request.model\": model.modelId,\n                                    \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                    \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                    \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                    \"gen_ai.request.stop_sequences\": settings.stopSequences,\n                                    \"gen_ai.request.temperature\": settings.temperature,\n                                    \"gen_ai.request.top_k\": settings.topK,\n                                    \"gen_ai.request.top_p\": settings.topP\n                                }\n                            }),\n                            tracer,\n                            endWhenDone: false,\n                            fn: async (doStreamSpan2)=>({\n                                    startTimestampMs: now2(),\n                                    // get before the call\n                                    doStreamSpan: doStreamSpan2,\n                                    result: await model.doStream({\n                                        mode,\n                                        ...prepareCallSettings(settings),\n                                        inputFormat: promptFormat,\n                                        responseFormat: output == null ? void 0 : output.responseFormat({\n                                            model\n                                        }),\n                                        prompt: promptMessages,\n                                        providerMetadata: providerOptions,\n                                        abortSignal,\n                                        headers\n                                    })\n                                })\n                        }));\n                    const transformedStream = runToolsTransformation({\n                        tools,\n                        generatorStream: stream2,\n                        toolCallStreaming,\n                        tracer,\n                        telemetry,\n                        system,\n                        messages: stepInputMessages,\n                        repairToolCall,\n                        abortSignal\n                    });\n                    const stepRequest = request != null ? request : {};\n                    const stepToolCalls = [];\n                    const stepToolResults = [];\n                    const stepReasoning2 = [];\n                    const stepFiles2 = [];\n                    let activeReasoningText2 = void 0;\n                    let stepFinishReason = \"unknown\";\n                    let stepUsage = {\n                        promptTokens: 0,\n                        completionTokens: 0,\n                        totalTokens: 0\n                    };\n                    let stepProviderMetadata;\n                    let stepFirstChunk = true;\n                    let stepText = \"\";\n                    let fullStepText = stepType2 === \"continue\" ? previousStepText : \"\";\n                    let stepLogProbs;\n                    let stepResponse = {\n                        id: generateId3(),\n                        timestamp: currentDate(),\n                        modelId: model.modelId\n                    };\n                    let chunkBuffer = \"\";\n                    let chunkTextPublished = false;\n                    let inWhitespacePrefix = true;\n                    let hasWhitespaceSuffix = false;\n                    async function publishTextChunk({ controller, chunk }) {\n                        controller.enqueue(chunk);\n                        stepText += chunk.textDelta;\n                        fullStepText += chunk.textDelta;\n                        chunkTextPublished = true;\n                        hasWhitespaceSuffix = chunk.textDelta.trimEnd() !== chunk.textDelta;\n                    }\n                    self.addStream(transformedStream.pipeThrough(new TransformStream({\n                        async transform (chunk, controller) {\n                            var _a19, _b, _c;\n                            if (stepFirstChunk) {\n                                const msToFirstChunk = now2() - startTimestampMs;\n                                stepFirstChunk = false;\n                                doStreamSpan.addEvent(\"ai.stream.firstChunk\", {\n                                    \"ai.response.msToFirstChunk\": msToFirstChunk\n                                });\n                                doStreamSpan.setAttributes({\n                                    \"ai.response.msToFirstChunk\": msToFirstChunk\n                                });\n                                controller.enqueue({\n                                    type: \"step-start\",\n                                    messageId,\n                                    request: stepRequest,\n                                    warnings: warnings != null ? warnings : []\n                                });\n                            }\n                            if (chunk.type === \"text-delta\" && chunk.textDelta.length === 0) {\n                                return;\n                            }\n                            const chunkType = chunk.type;\n                            switch(chunkType){\n                                case \"text-delta\":\n                                    {\n                                        if (continueSteps) {\n                                            const trimmedChunkText = inWhitespacePrefix && hasLeadingWhitespace ? chunk.textDelta.trimStart() : chunk.textDelta;\n                                            if (trimmedChunkText.length === 0) {\n                                                break;\n                                            }\n                                            inWhitespacePrefix = false;\n                                            chunkBuffer += trimmedChunkText;\n                                            const split = splitOnLastWhitespace(chunkBuffer);\n                                            if (split != null) {\n                                                chunkBuffer = split.suffix;\n                                                await publishTextChunk({\n                                                    controller,\n                                                    chunk: {\n                                                        type: \"text-delta\",\n                                                        textDelta: split.prefix + split.whitespace\n                                                    }\n                                                });\n                                            }\n                                        } else {\n                                            await publishTextChunk({\n                                                controller,\n                                                chunk\n                                            });\n                                        }\n                                        break;\n                                    }\n                                case \"reasoning\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        if (activeReasoningText2 == null) {\n                                            activeReasoningText2 = {\n                                                type: \"text\",\n                                                text: chunk.textDelta\n                                            };\n                                            stepReasoning2.push(activeReasoningText2);\n                                        } else {\n                                            activeReasoningText2.text += chunk.textDelta;\n                                        }\n                                        break;\n                                    }\n                                case \"reasoning-signature\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        if (activeReasoningText2 == null) {\n                                            throw new InvalidStreamPartError({\n                                                chunk,\n                                                message: \"reasoning-signature without reasoning\"\n                                            });\n                                        }\n                                        activeReasoningText2.signature = chunk.signature;\n                                        activeReasoningText2 = void 0;\n                                        break;\n                                    }\n                                case \"redacted-reasoning\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        stepReasoning2.push({\n                                            type: \"redacted\",\n                                            data: chunk.data\n                                        });\n                                        break;\n                                    }\n                                case \"tool-call\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        stepToolCalls.push(chunk);\n                                        break;\n                                    }\n                                case \"tool-result\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        stepToolResults.push(chunk);\n                                        break;\n                                    }\n                                case \"response-metadata\":\n                                    {\n                                        stepResponse = {\n                                            id: (_a19 = chunk.id) != null ? _a19 : stepResponse.id,\n                                            timestamp: (_b = chunk.timestamp) != null ? _b : stepResponse.timestamp,\n                                            modelId: (_c = chunk.modelId) != null ? _c : stepResponse.modelId\n                                        };\n                                        break;\n                                    }\n                                case \"finish\":\n                                    {\n                                        stepUsage = chunk.usage;\n                                        stepFinishReason = chunk.finishReason;\n                                        stepProviderMetadata = chunk.experimental_providerMetadata;\n                                        stepLogProbs = chunk.logprobs;\n                                        const msToFinish = now2() - startTimestampMs;\n                                        doStreamSpan.addEvent(\"ai.stream.finish\");\n                                        doStreamSpan.setAttributes({\n                                            \"ai.response.msToFinish\": msToFinish,\n                                            \"ai.response.avgCompletionTokensPerSecond\": 1e3 * stepUsage.completionTokens / msToFinish\n                                        });\n                                        break;\n                                    }\n                                case \"file\":\n                                    {\n                                        stepFiles2.push(chunk);\n                                        controller.enqueue(chunk);\n                                        break;\n                                    }\n                                case \"source\":\n                                case \"tool-call-streaming-start\":\n                                case \"tool-call-delta\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        break;\n                                    }\n                                case \"error\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        stepFinishReason = \"error\";\n                                        break;\n                                    }\n                                default:\n                                    {\n                                        const exhaustiveCheck = chunkType;\n                                        throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);\n                                    }\n                            }\n                        },\n                        // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n                        async flush (controller) {\n                            const stepToolCallsJson = stepToolCalls.length > 0 ? JSON.stringify(stepToolCalls) : void 0;\n                            let nextStepType = \"done\";\n                            if (currentStep + 1 < maxSteps) {\n                                if (continueSteps && stepFinishReason === \"length\" && // only use continue when there are no tool calls:\n                                stepToolCalls.length === 0) {\n                                    nextStepType = \"continue\";\n                                } else if (// there are tool calls:\n                                stepToolCalls.length > 0 && // all current tool calls have results:\n                                stepToolResults.length === stepToolCalls.length) {\n                                    nextStepType = \"tool-result\";\n                                }\n                            }\n                            if (continueSteps && chunkBuffer.length > 0 && (nextStepType !== \"continue\" || // when the next step is a regular step, publish the buffer\n                            stepType2 === \"continue\" && !chunkTextPublished)) {\n                                await publishTextChunk({\n                                    controller,\n                                    chunk: {\n                                        type: \"text-delta\",\n                                        textDelta: chunkBuffer\n                                    }\n                                });\n                                chunkBuffer = \"\";\n                            }\n                            try {\n                                doStreamSpan.setAttributes(selectTelemetryAttributes({\n                                    telemetry,\n                                    attributes: {\n                                        \"ai.response.finishReason\": stepFinishReason,\n                                        \"ai.response.text\": {\n                                            output: ()=>stepText\n                                        },\n                                        \"ai.response.toolCalls\": {\n                                            output: ()=>stepToolCallsJson\n                                        },\n                                        \"ai.response.id\": stepResponse.id,\n                                        \"ai.response.model\": stepResponse.modelId,\n                                        \"ai.response.timestamp\": stepResponse.timestamp.toISOString(),\n                                        \"ai.usage.promptTokens\": stepUsage.promptTokens,\n                                        \"ai.usage.completionTokens\": stepUsage.completionTokens,\n                                        // standardized gen-ai llm span attributes:\n                                        \"gen_ai.response.finish_reasons\": [\n                                            stepFinishReason\n                                        ],\n                                        \"gen_ai.response.id\": stepResponse.id,\n                                        \"gen_ai.response.model\": stepResponse.modelId,\n                                        \"gen_ai.usage.input_tokens\": stepUsage.promptTokens,\n                                        \"gen_ai.usage.output_tokens\": stepUsage.completionTokens\n                                    }\n                                }));\n                            } catch (error) {} finally{\n                                doStreamSpan.end();\n                            }\n                            controller.enqueue({\n                                type: \"step-finish\",\n                                finishReason: stepFinishReason,\n                                usage: stepUsage,\n                                providerMetadata: stepProviderMetadata,\n                                experimental_providerMetadata: stepProviderMetadata,\n                                logprobs: stepLogProbs,\n                                request: stepRequest,\n                                response: {\n                                    ...stepResponse,\n                                    headers: rawResponse == null ? void 0 : rawResponse.headers\n                                },\n                                warnings,\n                                isContinued: nextStepType === \"continue\",\n                                messageId\n                            });\n                            const combinedUsage = addLanguageModelUsage(usage, stepUsage);\n                            if (nextStepType === \"done\") {\n                                controller.enqueue({\n                                    type: \"finish\",\n                                    finishReason: stepFinishReason,\n                                    usage: combinedUsage,\n                                    providerMetadata: stepProviderMetadata,\n                                    experimental_providerMetadata: stepProviderMetadata,\n                                    logprobs: stepLogProbs,\n                                    response: {\n                                        ...stepResponse,\n                                        headers: rawResponse == null ? void 0 : rawResponse.headers\n                                    }\n                                });\n                                self.closeStream();\n                            } else {\n                                if (stepType2 === \"continue\") {\n                                    const lastMessage = responseMessages[responseMessages.length - 1];\n                                    if (typeof lastMessage.content === \"string\") {\n                                        lastMessage.content += stepText;\n                                    } else {\n                                        lastMessage.content.push({\n                                            text: stepText,\n                                            type: \"text\"\n                                        });\n                                    }\n                                } else {\n                                    responseMessages.push(...toResponseMessages({\n                                        text: stepText,\n                                        files: stepFiles2,\n                                        reasoning: stepReasoning2,\n                                        tools: tools != null ? tools : {},\n                                        toolCalls: stepToolCalls,\n                                        toolResults: stepToolResults,\n                                        messageId,\n                                        generateMessageId\n                                    }));\n                                }\n                                await streamStep({\n                                    currentStep: currentStep + 1,\n                                    responseMessages,\n                                    usage: combinedUsage,\n                                    stepType: nextStepType,\n                                    previousStepText: fullStepText,\n                                    hasLeadingWhitespace: hasWhitespaceSuffix,\n                                    messageId: // keep the same id when continuing a step:\n                                    nextStepType === \"continue\" ? messageId : generateMessageId()\n                                });\n                            }\n                        }\n                    })));\n                }\n                await streamStep({\n                    currentStep: 0,\n                    responseMessages: [],\n                    usage: {\n                        promptTokens: 0,\n                        completionTokens: 0,\n                        totalTokens: 0\n                    },\n                    previousStepText: \"\",\n                    stepType: \"initial\",\n                    hasLeadingWhitespace: false,\n                    messageId: generateMessageId()\n                });\n            }\n        }).catch((error)=>{\n            self.addStream(new ReadableStream({\n                start (controller) {\n                    controller.enqueue({\n                        type: \"error\",\n                        error\n                    });\n                    controller.close();\n                }\n            }));\n            self.closeStream();\n        });\n    }\n    get warnings() {\n        return this.warningsPromise.value;\n    }\n    get usage() {\n        return this.usagePromise.value;\n    }\n    get finishReason() {\n        return this.finishReasonPromise.value;\n    }\n    get experimental_providerMetadata() {\n        return this.providerMetadataPromise.value;\n    }\n    get providerMetadata() {\n        return this.providerMetadataPromise.value;\n    }\n    get text() {\n        return this.textPromise.value;\n    }\n    get reasoning() {\n        return this.reasoningPromise.value;\n    }\n    get reasoningDetails() {\n        return this.reasoningDetailsPromise.value;\n    }\n    get sources() {\n        return this.sourcesPromise.value;\n    }\n    get files() {\n        return this.filesPromise.value;\n    }\n    get toolCalls() {\n        return this.toolCallsPromise.value;\n    }\n    get toolResults() {\n        return this.toolResultsPromise.value;\n    }\n    get request() {\n        return this.requestPromise.value;\n    }\n    get response() {\n        return this.responsePromise.value;\n    }\n    get steps() {\n        return this.stepsPromise.value;\n    }\n    /**\n  Split out a new stream from the original stream.\n  The original stream is replaced to allow for further splitting,\n  since we do not know how many times the stream will be split.\n  \n  Note: this leads to buffering the stream content on the server.\n  However, the LLM results are expected to be small enough to not cause issues.\n     */ teeStream() {\n        const [stream1, stream2] = this.baseStream.tee();\n        this.baseStream = stream2;\n        return stream1;\n    }\n    get textStream() {\n        return createAsyncIterableStream(this.teeStream().pipeThrough(new TransformStream({\n            transform ({ part }, controller) {\n                if (part.type === \"text-delta\") {\n                    controller.enqueue(part.textDelta);\n                }\n            }\n        })));\n    }\n    get fullStream() {\n        return createAsyncIterableStream(this.teeStream().pipeThrough(new TransformStream({\n            transform ({ part }, controller) {\n                controller.enqueue(part);\n            }\n        })));\n    }\n    async consumeStream(options) {\n        var _a17;\n        try {\n            await consumeStream({\n                stream: this.fullStream,\n                onError: options == null ? void 0 : options.onError\n            });\n        } catch (error) {\n            (_a17 = options == null ? void 0 : options.onError) == null ? void 0 : _a17.call(options, error);\n        }\n    }\n    get experimental_partialOutputStream() {\n        if (this.output == null) {\n            throw new NoOutputSpecifiedError();\n        }\n        return createAsyncIterableStream(this.teeStream().pipeThrough(new TransformStream({\n            transform ({ partialOutput }, controller) {\n                if (partialOutput != null) {\n                    controller.enqueue(partialOutput);\n                }\n            }\n        })));\n    }\n    toDataStreamInternal({ getErrorMessage: getErrorMessage5 = ()=>\"An error occurred.\", // mask error messages for safety by default\n    sendUsage = true, sendReasoning = false, sendSources = false, experimental_sendFinish = true }) {\n        return this.fullStream.pipeThrough(new TransformStream({\n            transform: async (chunk, controller)=>{\n                const chunkType = chunk.type;\n                switch(chunkType){\n                    case \"text-delta\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"text\", chunk.textDelta));\n                            break;\n                        }\n                    case \"reasoning\":\n                        {\n                            if (sendReasoning) {\n                                controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"reasoning\", chunk.textDelta));\n                            }\n                            break;\n                        }\n                    case \"redacted-reasoning\":\n                        {\n                            if (sendReasoning) {\n                                controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"redacted_reasoning\", {\n                                    data: chunk.data\n                                }));\n                            }\n                            break;\n                        }\n                    case \"reasoning-signature\":\n                        {\n                            if (sendReasoning) {\n                                controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"reasoning_signature\", {\n                                    signature: chunk.signature\n                                }));\n                            }\n                            break;\n                        }\n                    case \"file\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"file\", {\n                                mimeType: chunk.mimeType,\n                                data: chunk.base64\n                            }));\n                            break;\n                        }\n                    case \"source\":\n                        {\n                            if (sendSources) {\n                                controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"source\", chunk.source));\n                            }\n                            break;\n                        }\n                    case \"tool-call-streaming-start\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"tool_call_streaming_start\", {\n                                toolCallId: chunk.toolCallId,\n                                toolName: chunk.toolName\n                            }));\n                            break;\n                        }\n                    case \"tool-call-delta\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"tool_call_delta\", {\n                                toolCallId: chunk.toolCallId,\n                                argsTextDelta: chunk.argsTextDelta\n                            }));\n                            break;\n                        }\n                    case \"tool-call\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"tool_call\", {\n                                toolCallId: chunk.toolCallId,\n                                toolName: chunk.toolName,\n                                args: chunk.args\n                            }));\n                            break;\n                        }\n                    case \"tool-result\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"tool_result\", {\n                                toolCallId: chunk.toolCallId,\n                                result: chunk.result\n                            }));\n                            break;\n                        }\n                    case \"error\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"error\", getErrorMessage5(chunk.error)));\n                            break;\n                        }\n                    case \"step-start\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"start_step\", {\n                                messageId: chunk.messageId\n                            }));\n                            break;\n                        }\n                    case \"step-finish\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"finish_step\", {\n                                finishReason: chunk.finishReason,\n                                usage: sendUsage ? {\n                                    promptTokens: chunk.usage.promptTokens,\n                                    completionTokens: chunk.usage.completionTokens\n                                } : void 0,\n                                isContinued: chunk.isContinued\n                            }));\n                            break;\n                        }\n                    case \"finish\":\n                        {\n                            if (experimental_sendFinish) {\n                                controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"finish_message\", {\n                                    finishReason: chunk.finishReason,\n                                    usage: sendUsage ? {\n                                        promptTokens: chunk.usage.promptTokens,\n                                        completionTokens: chunk.usage.completionTokens\n                                    } : void 0\n                                }));\n                            }\n                            break;\n                        }\n                    default:\n                        {\n                            const exhaustiveCheck = chunkType;\n                            throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);\n                        }\n                }\n            }\n        }));\n    }\n    pipeDataStreamToResponse(response, { status, statusText, headers, data, getErrorMessage: getErrorMessage5, sendUsage, sendReasoning, sendSources, experimental_sendFinish } = {}) {\n        writeToServerResponse({\n            response,\n            status,\n            statusText,\n            headers: prepareOutgoingHttpHeaders(headers, {\n                contentType: \"text/plain; charset=utf-8\",\n                dataStreamVersion: \"v1\"\n            }),\n            stream: this.toDataStream({\n                data,\n                getErrorMessage: getErrorMessage5,\n                sendUsage,\n                sendReasoning,\n                sendSources,\n                experimental_sendFinish\n            })\n        });\n    }\n    pipeTextStreamToResponse(response, init) {\n        writeToServerResponse({\n            response,\n            status: init == null ? void 0 : init.status,\n            statusText: init == null ? void 0 : init.statusText,\n            headers: prepareOutgoingHttpHeaders(init == null ? void 0 : init.headers, {\n                contentType: \"text/plain; charset=utf-8\"\n            }),\n            stream: this.textStream.pipeThrough(new TextEncoderStream())\n        });\n    }\n    // TODO breaking change 5.0: remove pipeThrough(new TextEncoderStream())\n    toDataStream(options) {\n        const stream = this.toDataStreamInternal({\n            getErrorMessage: options == null ? void 0 : options.getErrorMessage,\n            sendUsage: options == null ? void 0 : options.sendUsage,\n            sendReasoning: options == null ? void 0 : options.sendReasoning,\n            sendSources: options == null ? void 0 : options.sendSources,\n            experimental_sendFinish: options == null ? void 0 : options.experimental_sendFinish\n        }).pipeThrough(new TextEncoderStream());\n        return (options == null ? void 0 : options.data) ? mergeStreams(options == null ? void 0 : options.data.stream, stream) : stream;\n    }\n    mergeIntoDataStream(writer, options) {\n        writer.merge(this.toDataStreamInternal({\n            getErrorMessage: writer.onError,\n            sendUsage: options == null ? void 0 : options.sendUsage,\n            sendReasoning: options == null ? void 0 : options.sendReasoning,\n            sendSources: options == null ? void 0 : options.sendSources,\n            experimental_sendFinish: options == null ? void 0 : options.experimental_sendFinish\n        }));\n    }\n    toDataStreamResponse({ headers, status, statusText, data, getErrorMessage: getErrorMessage5, sendUsage, sendReasoning, sendSources, experimental_sendFinish } = {}) {\n        return new Response(this.toDataStream({\n            data,\n            getErrorMessage: getErrorMessage5,\n            sendUsage,\n            sendReasoning,\n            sendSources,\n            experimental_sendFinish\n        }), {\n            status,\n            statusText,\n            headers: prepareResponseHeaders(headers, {\n                contentType: \"text/plain; charset=utf-8\",\n                dataStreamVersion: \"v1\"\n            })\n        });\n    }\n    toTextStreamResponse(init) {\n        var _a17;\n        return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {\n            status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,\n            headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {\n                contentType: \"text/plain; charset=utf-8\"\n            })\n        });\n    }\n};\n// errors/no-speech-generated-error.ts\n\nvar NoSpeechGeneratedError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor(options){\n        super({\n            name: \"AI_NoSpeechGeneratedError\",\n            message: \"No speech audio generated.\"\n        });\n        this.responses = options.responses;\n    }\n};\n// core/generate-speech/generated-audio-file.ts\nvar DefaultGeneratedAudioFile = class extends DefaultGeneratedFile {\n    constructor({ data, mimeType }){\n        super({\n            data,\n            mimeType\n        });\n        let format = \"mp3\";\n        if (mimeType) {\n            const mimeTypeParts = mimeType.split(\"/\");\n            if (mimeTypeParts.length === 2) {\n                if (mimeType !== \"audio/mpeg\") {\n                    format = mimeTypeParts[1];\n                }\n            }\n        }\n        if (!format) {\n            throw new Error(\"Audio format must be provided or determinable from mimeType\");\n        }\n        this.format = format;\n    }\n};\n// core/generate-speech/generate-speech.ts\nasync function generateSpeech({ model, text: text2, voice, outputFormat, instructions, speed, providerOptions = {}, maxRetries: maxRetriesArg, abortSignal, headers }) {\n    var _a17;\n    const { retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const result = await retry(()=>model.doGenerate({\n            text: text2,\n            voice,\n            outputFormat,\n            instructions,\n            speed,\n            abortSignal,\n            headers,\n            providerOptions\n        }));\n    if (!result.audio || result.audio.length === 0) {\n        throw new NoSpeechGeneratedError({\n            responses: [\n                result.response\n            ]\n        });\n    }\n    return new DefaultSpeechResult({\n        audio: new DefaultGeneratedAudioFile({\n            data: result.audio,\n            mimeType: (_a17 = detectMimeType({\n                data: result.audio,\n                signatures: audioMimeTypeSignatures\n            })) != null ? _a17 : \"audio/mp3\"\n        }),\n        warnings: result.warnings,\n        responses: [\n            result.response\n        ],\n        providerMetadata: result.providerMetadata\n    });\n}\nvar DefaultSpeechResult = class {\n    constructor(options){\n        var _a17;\n        this.audio = options.audio;\n        this.warnings = options.warnings;\n        this.responses = options.responses;\n        this.providerMetadata = (_a17 = options.providerMetadata) != null ? _a17 : {};\n    }\n};\n// errors/no-transcript-generated-error.ts\n\nvar NoTranscriptGeneratedError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor(options){\n        super({\n            name: \"AI_NoTranscriptGeneratedError\",\n            message: \"No transcript generated.\"\n        });\n        this.responses = options.responses;\n    }\n};\n// core/transcribe/transcribe.ts\nasync function transcribe({ model, audio, providerOptions = {}, maxRetries: maxRetriesArg, abortSignal, headers }) {\n    const { retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const audioData = audio instanceof URL ? (await download({\n        url: audio\n    })).data : convertDataContentToUint8Array(audio);\n    const result = await retry(()=>{\n        var _a17;\n        return model.doGenerate({\n            audio: audioData,\n            abortSignal,\n            headers,\n            providerOptions,\n            mediaType: (_a17 = detectMimeType({\n                data: audioData,\n                signatures: audioMimeTypeSignatures\n            })) != null ? _a17 : \"audio/wav\"\n        });\n    });\n    if (!result.text) {\n        throw new NoTranscriptGeneratedError({\n            responses: [\n                result.response\n            ]\n        });\n    }\n    return new DefaultTranscriptionResult({\n        text: result.text,\n        segments: result.segments,\n        language: result.language,\n        durationInSeconds: result.durationInSeconds,\n        warnings: result.warnings,\n        responses: [\n            result.response\n        ],\n        providerMetadata: result.providerMetadata\n    });\n}\nvar DefaultTranscriptionResult = class {\n    constructor(options){\n        var _a17;\n        this.text = options.text;\n        this.segments = options.segments;\n        this.language = options.language;\n        this.durationInSeconds = options.durationInSeconds;\n        this.warnings = options.warnings;\n        this.responses = options.responses;\n        this.providerMetadata = (_a17 = options.providerMetadata) != null ? _a17 : {};\n    }\n};\n// core/util/merge-objects.ts\nfunction mergeObjects(target, source) {\n    if (target === void 0 && source === void 0) {\n        return void 0;\n    }\n    if (target === void 0) {\n        return source;\n    }\n    if (source === void 0) {\n        return target;\n    }\n    const result = {\n        ...target\n    };\n    for(const key in source){\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            const sourceValue = source[key];\n            if (sourceValue === void 0) continue;\n            const targetValue = key in target ? target[key] : void 0;\n            const isSourceObject = sourceValue !== null && typeof sourceValue === \"object\" && !Array.isArray(sourceValue) && !(sourceValue instanceof Date) && !(sourceValue instanceof RegExp);\n            const isTargetObject = targetValue !== null && targetValue !== void 0 && typeof targetValue === \"object\" && !Array.isArray(targetValue) && !(targetValue instanceof Date) && !(targetValue instanceof RegExp);\n            if (isSourceObject && isTargetObject) {\n                result[key] = mergeObjects(targetValue, sourceValue);\n            } else {\n                result[key] = sourceValue;\n            }\n        }\n    }\n    return result;\n}\n// core/middleware/default-settings-middleware.ts\nfunction defaultSettingsMiddleware({ settings }) {\n    return {\n        middlewareVersion: \"v1\",\n        transformParams: async ({ params })=>{\n            var _a17;\n            return {\n                ...settings,\n                ...params,\n                providerMetadata: mergeObjects(settings.providerMetadata, params.providerMetadata),\n                // special case for temperature 0\n                // TODO remove when temperature defaults to undefined\n                temperature: params.temperature === 0 || params.temperature == null ? (_a17 = settings.temperature) != null ? _a17 : 0 : params.temperature\n            };\n        }\n    };\n}\n// core/util/get-potential-start-index.ts\nfunction getPotentialStartIndex(text2, searchedText) {\n    if (searchedText.length === 0) {\n        return null;\n    }\n    const directIndex = text2.indexOf(searchedText);\n    if (directIndex !== -1) {\n        return directIndex;\n    }\n    for(let i = text2.length - 1; i >= 0; i--){\n        const suffix = text2.substring(i);\n        if (searchedText.startsWith(suffix)) {\n            return i;\n        }\n    }\n    return null;\n}\n// core/middleware/extract-reasoning-middleware.ts\nfunction extractReasoningMiddleware({ tagName, separator = \"\\n\", startWithReasoning = false }) {\n    const openingTag = `<${tagName}>`;\n    const closingTag = `</${tagName}>`;\n    return {\n        middlewareVersion: \"v1\",\n        wrapGenerate: async ({ doGenerate })=>{\n            const { text: rawText, ...rest } = await doGenerate();\n            if (rawText == null) {\n                return {\n                    text: rawText,\n                    ...rest\n                };\n            }\n            const text2 = startWithReasoning ? openingTag + rawText : rawText;\n            const regexp = new RegExp(`${openingTag}(.*?)${closingTag}`, \"gs\");\n            const matches = Array.from(text2.matchAll(regexp));\n            if (!matches.length) {\n                return {\n                    text: text2,\n                    ...rest\n                };\n            }\n            const reasoning = matches.map((match)=>match[1]).join(separator);\n            let textWithoutReasoning = text2;\n            for(let i = matches.length - 1; i >= 0; i--){\n                const match = matches[i];\n                const beforeMatch = textWithoutReasoning.slice(0, match.index);\n                const afterMatch = textWithoutReasoning.slice(match.index + match[0].length);\n                textWithoutReasoning = beforeMatch + (beforeMatch.length > 0 && afterMatch.length > 0 ? separator : \"\") + afterMatch;\n            }\n            return {\n                ...rest,\n                text: textWithoutReasoning,\n                reasoning\n            };\n        },\n        wrapStream: async ({ doStream })=>{\n            const { stream, ...rest } = await doStream();\n            let isFirstReasoning = true;\n            let isFirstText = true;\n            let afterSwitch = false;\n            let isReasoning = startWithReasoning;\n            let buffer = \"\";\n            return {\n                stream: stream.pipeThrough(new TransformStream({\n                    transform: (chunk, controller)=>{\n                        if (chunk.type !== \"text-delta\") {\n                            controller.enqueue(chunk);\n                            return;\n                        }\n                        buffer += chunk.textDelta;\n                        function publish(text2) {\n                            if (text2.length > 0) {\n                                const prefix = afterSwitch && (isReasoning ? !isFirstReasoning : !isFirstText) ? separator : \"\";\n                                controller.enqueue({\n                                    type: isReasoning ? \"reasoning\" : \"text-delta\",\n                                    textDelta: prefix + text2\n                                });\n                                afterSwitch = false;\n                                if (isReasoning) {\n                                    isFirstReasoning = false;\n                                } else {\n                                    isFirstText = false;\n                                }\n                            }\n                        }\n                        do {\n                            const nextTag = isReasoning ? closingTag : openingTag;\n                            const startIndex = getPotentialStartIndex(buffer, nextTag);\n                            if (startIndex == null) {\n                                publish(buffer);\n                                buffer = \"\";\n                                break;\n                            }\n                            publish(buffer.slice(0, startIndex));\n                            const foundFullMatch = startIndex + nextTag.length <= buffer.length;\n                            if (foundFullMatch) {\n                                buffer = buffer.slice(startIndex + nextTag.length);\n                                isReasoning = !isReasoning;\n                                afterSwitch = true;\n                            } else {\n                                buffer = buffer.slice(startIndex);\n                                break;\n                            }\n                        }while (true);\n                    }\n                })),\n                ...rest\n            };\n        }\n    };\n}\n// core/middleware/simulate-streaming-middleware.ts\nfunction simulateStreamingMiddleware() {\n    return {\n        middlewareVersion: \"v1\",\n        wrapStream: async ({ doGenerate })=>{\n            const result = await doGenerate();\n            const simulatedStream = new ReadableStream({\n                start (controller) {\n                    controller.enqueue({\n                        type: \"response-metadata\",\n                        ...result.response\n                    });\n                    if (result.reasoning) {\n                        if (typeof result.reasoning === \"string\") {\n                            controller.enqueue({\n                                type: \"reasoning\",\n                                textDelta: result.reasoning\n                            });\n                        } else {\n                            for (const reasoning of result.reasoning){\n                                switch(reasoning.type){\n                                    case \"text\":\n                                        {\n                                            controller.enqueue({\n                                                type: \"reasoning\",\n                                                textDelta: reasoning.text\n                                            });\n                                            if (reasoning.signature != null) {\n                                                controller.enqueue({\n                                                    type: \"reasoning-signature\",\n                                                    signature: reasoning.signature\n                                                });\n                                            }\n                                            break;\n                                        }\n                                    case \"redacted\":\n                                        {\n                                            controller.enqueue({\n                                                type: \"redacted-reasoning\",\n                                                data: reasoning.data\n                                            });\n                                            break;\n                                        }\n                                }\n                            }\n                        }\n                    }\n                    if (result.text) {\n                        controller.enqueue({\n                            type: \"text-delta\",\n                            textDelta: result.text\n                        });\n                    }\n                    if (result.toolCalls) {\n                        for (const toolCall of result.toolCalls){\n                            controller.enqueue({\n                                type: \"tool-call-delta\",\n                                toolCallType: \"function\",\n                                toolCallId: toolCall.toolCallId,\n                                toolName: toolCall.toolName,\n                                argsTextDelta: toolCall.args\n                            });\n                            controller.enqueue({\n                                type: \"tool-call\",\n                                ...toolCall\n                            });\n                        }\n                    }\n                    controller.enqueue({\n                        type: \"finish\",\n                        finishReason: result.finishReason,\n                        usage: result.usage,\n                        logprobs: result.logprobs,\n                        providerMetadata: result.providerMetadata\n                    });\n                    controller.close();\n                }\n            });\n            return {\n                stream: simulatedStream,\n                rawCall: result.rawCall,\n                rawResponse: result.rawResponse,\n                warnings: result.warnings\n            };\n        }\n    };\n}\n// core/middleware/wrap-language-model.ts\nvar wrapLanguageModel = ({ model, middleware: middlewareArg, modelId, providerId })=>{\n    return asArray(middlewareArg).reverse().reduce((wrappedModel, middleware)=>{\n        return doWrap({\n            model: wrappedModel,\n            middleware,\n            modelId,\n            providerId\n        });\n    }, model);\n};\nvar doWrap = ({ model, middleware: { transformParams, wrapGenerate, wrapStream }, modelId, providerId })=>{\n    var _a17;\n    async function doTransform({ params, type }) {\n        return transformParams ? await transformParams({\n            params,\n            type\n        }) : params;\n    }\n    return {\n        specificationVersion: \"v1\",\n        provider: providerId != null ? providerId : model.provider,\n        modelId: modelId != null ? modelId : model.modelId,\n        defaultObjectGenerationMode: model.defaultObjectGenerationMode,\n        supportsImageUrls: model.supportsImageUrls,\n        supportsUrl: (_a17 = model.supportsUrl) == null ? void 0 : _a17.bind(model),\n        supportsStructuredOutputs: model.supportsStructuredOutputs,\n        async doGenerate (params) {\n            const transformedParams = await doTransform({\n                params,\n                type: \"generate\"\n            });\n            const doGenerate = async ()=>model.doGenerate(transformedParams);\n            const doStream = async ()=>model.doStream(transformedParams);\n            return wrapGenerate ? wrapGenerate({\n                doGenerate,\n                doStream,\n                params: transformedParams,\n                model\n            }) : doGenerate();\n        },\n        async doStream (params) {\n            const transformedParams = await doTransform({\n                params,\n                type: \"stream\"\n            });\n            const doGenerate = async ()=>model.doGenerate(transformedParams);\n            const doStream = async ()=>model.doStream(transformedParams);\n            return wrapStream ? wrapStream({\n                doGenerate,\n                doStream,\n                params: transformedParams,\n                model\n            }) : doStream();\n        }\n    };\n};\nvar experimental_wrapLanguageModel = wrapLanguageModel;\n// core/prompt/append-client-message.ts\nfunction appendClientMessage({ messages, message }) {\n    return [\n        ...messages.length > 0 && messages[messages.length - 1].id === message.id ? messages.slice(0, -1) : messages,\n        message\n    ];\n}\n// core/prompt/append-response-messages.ts\n\n\nfunction appendResponseMessages({ messages, responseMessages, _internal: { currentDate = ()=>/* @__PURE__ */ new Date() } = {} }) {\n    var _a17, _b, _c, _d;\n    const clonedMessages = structuredClone(messages);\n    for (const message of responseMessages){\n        const role = message.role;\n        const lastMessage = clonedMessages[clonedMessages.length - 1];\n        const isLastMessageAssistant = lastMessage.role === \"assistant\";\n        switch(role){\n            case \"assistant\":\n                {\n                    let getToolInvocations2 = function(step) {\n                        return (typeof message.content === \"string\" ? [] : message.content.filter((part)=>part.type === \"tool-call\")).map((call)=>({\n                                state: \"call\",\n                                step,\n                                args: call.args,\n                                toolCallId: call.toolCallId,\n                                toolName: call.toolName\n                            }));\n                    };\n                    var getToolInvocations = getToolInvocations2;\n                    const parts = [\n                        {\n                            type: \"step-start\"\n                        }\n                    ];\n                    let textContent = \"\";\n                    let reasoningTextContent = void 0;\n                    if (typeof message.content === \"string\") {\n                        textContent = message.content;\n                        parts.push({\n                            type: \"text\",\n                            text: message.content\n                        });\n                    } else {\n                        let reasoningPart = void 0;\n                        for (const part of message.content){\n                            switch(part.type){\n                                case \"text\":\n                                    {\n                                        reasoningPart = void 0;\n                                        textContent += part.text;\n                                        parts.push({\n                                            type: \"text\",\n                                            text: part.text\n                                        });\n                                        break;\n                                    }\n                                case \"reasoning\":\n                                    {\n                                        if (reasoningPart == null) {\n                                            reasoningPart = {\n                                                type: \"reasoning\",\n                                                reasoning: \"\",\n                                                details: []\n                                            };\n                                            parts.push(reasoningPart);\n                                        }\n                                        reasoningTextContent = (reasoningTextContent != null ? reasoningTextContent : \"\") + part.text;\n                                        reasoningPart.reasoning += part.text;\n                                        reasoningPart.details.push({\n                                            type: \"text\",\n                                            text: part.text,\n                                            signature: part.signature\n                                        });\n                                        break;\n                                    }\n                                case \"redacted-reasoning\":\n                                    {\n                                        if (reasoningPart == null) {\n                                            reasoningPart = {\n                                                type: \"reasoning\",\n                                                reasoning: \"\",\n                                                details: []\n                                            };\n                                            parts.push(reasoningPart);\n                                        }\n                                        reasoningPart.details.push({\n                                            type: \"redacted\",\n                                            data: part.data\n                                        });\n                                        break;\n                                    }\n                                case \"tool-call\":\n                                    break;\n                                case \"file\":\n                                    if (part.data instanceof URL) {\n                                        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError({\n                                            name: \"InvalidAssistantFileData\",\n                                            message: \"File data cannot be a URL\"\n                                        });\n                                    }\n                                    parts.push({\n                                        type: \"file\",\n                                        mimeType: part.mimeType,\n                                        data: convertDataContentToBase64String(part.data)\n                                    });\n                                    break;\n                            }\n                        }\n                    }\n                    if (isLastMessageAssistant) {\n                        const maxStep = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.extractMaxToolInvocationStep)(lastMessage.toolInvocations);\n                        (_a17 = lastMessage.parts) != null ? _a17 : lastMessage.parts = [];\n                        lastMessage.content = textContent;\n                        lastMessage.reasoning = reasoningTextContent;\n                        lastMessage.parts.push(...parts);\n                        lastMessage.toolInvocations = [\n                            ...(_b = lastMessage.toolInvocations) != null ? _b : [],\n                            ...getToolInvocations2(maxStep === void 0 ? 0 : maxStep + 1)\n                        ];\n                        getToolInvocations2(maxStep === void 0 ? 0 : maxStep + 1).map((call)=>({\n                                type: \"tool-invocation\",\n                                toolInvocation: call\n                            })).forEach((part)=>{\n                            lastMessage.parts.push(part);\n                        });\n                    } else {\n                        clonedMessages.push({\n                            role: \"assistant\",\n                            id: message.id,\n                            createdAt: currentDate(),\n                            // generate a createdAt date for the message, will be overridden by the client\n                            content: textContent,\n                            reasoning: reasoningTextContent,\n                            toolInvocations: getToolInvocations2(0),\n                            parts: [\n                                ...parts,\n                                ...getToolInvocations2(0).map((call)=>({\n                                        type: \"tool-invocation\",\n                                        toolInvocation: call\n                                    }))\n                            ]\n                        });\n                    }\n                    break;\n                }\n            case \"tool\":\n                {\n                    (_c = lastMessage.toolInvocations) != null ? _c : lastMessage.toolInvocations = [];\n                    if (lastMessage.role !== \"assistant\") {\n                        throw new Error(`Tool result must follow an assistant message: ${lastMessage.role}`);\n                    }\n                    (_d = lastMessage.parts) != null ? _d : lastMessage.parts = [];\n                    for (const contentPart of message.content){\n                        const toolCall = lastMessage.toolInvocations.find((call)=>call.toolCallId === contentPart.toolCallId);\n                        const toolCallPart = lastMessage.parts.find((part)=>part.type === \"tool-invocation\" && part.toolInvocation.toolCallId === contentPart.toolCallId);\n                        if (!toolCall) {\n                            throw new Error(\"Tool call not found in previous message\");\n                        }\n                        toolCall.state = \"result\";\n                        const toolResult = toolCall;\n                        toolResult.result = contentPart.result;\n                        if (toolCallPart) {\n                            toolCallPart.toolInvocation = toolResult;\n                        } else {\n                            lastMessage.parts.push({\n                                type: \"tool-invocation\",\n                                toolInvocation: toolResult\n                            });\n                        }\n                    }\n                    break;\n                }\n            default:\n                {\n                    const _exhaustiveCheck = role;\n                    throw new Error(`Unsupported message role: ${_exhaustiveCheck}`);\n                }\n        }\n    }\n    return clonedMessages;\n}\n// core/registry/custom-provider.ts\n\nfunction customProvider({ languageModels, textEmbeddingModels, imageModels, fallbackProvider }) {\n    return {\n        languageModel (modelId) {\n            if (languageModels != null && modelId in languageModels) {\n                return languageModels[modelId];\n            }\n            if (fallbackProvider) {\n                return fallbackProvider.languageModel(modelId);\n            }\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId,\n                modelType: \"languageModel\"\n            });\n        },\n        textEmbeddingModel (modelId) {\n            if (textEmbeddingModels != null && modelId in textEmbeddingModels) {\n                return textEmbeddingModels[modelId];\n            }\n            if (fallbackProvider) {\n                return fallbackProvider.textEmbeddingModel(modelId);\n            }\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId,\n                modelType: \"textEmbeddingModel\"\n            });\n        },\n        imageModel (modelId) {\n            if (imageModels != null && modelId in imageModels) {\n                return imageModels[modelId];\n            }\n            if (fallbackProvider == null ? void 0 : fallbackProvider.imageModel) {\n                return fallbackProvider.imageModel(modelId);\n            }\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId,\n                modelType: \"imageModel\"\n            });\n        }\n    };\n}\nvar experimental_customProvider = customProvider;\n// core/registry/no-such-provider-error.ts\n\nvar name16 = \"AI_NoSuchProviderError\";\nvar marker16 = `vercel.ai.error.${name16}`;\nvar symbol16 = Symbol.for(marker16);\nvar _a16;\nvar NoSuchProviderError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError {\n    constructor({ modelId, modelType, providerId, availableProviders, message = `No such provider: ${providerId} (available providers: ${availableProviders.join()})` }){\n        super({\n            errorName: name16,\n            modelId,\n            modelType,\n            message\n        });\n        this[_a16] = true;\n        this.providerId = providerId;\n        this.availableProviders = availableProviders;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker16);\n    }\n};\n_a16 = symbol16;\n// core/registry/provider-registry.ts\n\nfunction createProviderRegistry(providers, { separator = \":\" } = {}) {\n    const registry = new DefaultProviderRegistry({\n        separator\n    });\n    for (const [id, provider] of Object.entries(providers)){\n        registry.registerProvider({\n            id,\n            provider\n        });\n    }\n    return registry;\n}\nvar experimental_createProviderRegistry = createProviderRegistry;\nvar DefaultProviderRegistry = class {\n    constructor({ separator }){\n        this.providers = {};\n        this.separator = separator;\n    }\n    registerProvider({ id, provider }) {\n        this.providers[id] = provider;\n    }\n    getProvider(id) {\n        const provider = this.providers[id];\n        if (provider == null) {\n            throw new NoSuchProviderError({\n                modelId: id,\n                modelType: \"languageModel\",\n                providerId: id,\n                availableProviders: Object.keys(this.providers)\n            });\n        }\n        return provider;\n    }\n    splitId(id, modelType) {\n        const index = id.indexOf(this.separator);\n        if (index === -1) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId: id,\n                modelType,\n                message: `Invalid ${modelType} id for registry: ${id} (must be in the format \"providerId${this.separator}modelId\")`\n            });\n        }\n        return [\n            id.slice(0, index),\n            id.slice(index + this.separator.length)\n        ];\n    }\n    languageModel(id) {\n        var _a17, _b;\n        const [providerId, modelId] = this.splitId(id, \"languageModel\");\n        const model = (_b = (_a17 = this.getProvider(providerId)).languageModel) == null ? void 0 : _b.call(_a17, modelId);\n        if (model == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId: id,\n                modelType: \"languageModel\"\n            });\n        }\n        return model;\n    }\n    textEmbeddingModel(id) {\n        var _a17;\n        const [providerId, modelId] = this.splitId(id, \"textEmbeddingModel\");\n        const provider = this.getProvider(providerId);\n        const model = (_a17 = provider.textEmbeddingModel) == null ? void 0 : _a17.call(provider, modelId);\n        if (model == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId: id,\n                modelType: \"textEmbeddingModel\"\n            });\n        }\n        return model;\n    }\n    imageModel(id) {\n        var _a17;\n        const [providerId, modelId] = this.splitId(id, \"imageModel\");\n        const provider = this.getProvider(providerId);\n        const model = (_a17 = provider.imageModel) == null ? void 0 : _a17.call(provider, modelId);\n        if (model == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId: id,\n                modelType: \"imageModel\"\n            });\n        }\n        return model;\n    }\n};\n// core/tool/mcp/mcp-client.ts\n\n// core/tool/tool.ts\nfunction tool(tool2) {\n    return tool2;\n}\n// core/tool/mcp/mcp-sse-transport.ts\n\n// core/tool/mcp/json-rpc-message.ts\n\n// core/tool/mcp/types.ts\n\nvar LATEST_PROTOCOL_VERSION = \"2024-11-05\";\nvar SUPPORTED_PROTOCOL_VERSIONS = [\n    LATEST_PROTOCOL_VERSION,\n    \"2024-10-07\"\n];\nvar ClientOrServerImplementationSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    version: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n}).passthrough();\nvar BaseParamsSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    _meta: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({}).passthrough())\n}).passthrough();\nvar ResultSchema = BaseParamsSchema;\nvar RequestSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    method: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    params: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(BaseParamsSchema)\n});\nvar ServerCapabilitiesSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    experimental: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({}).passthrough()),\n    logging: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({}).passthrough()),\n    prompts: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean())\n    }).passthrough()),\n    resources: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        subscribe: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean()),\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean())\n    }).passthrough()),\n    tools: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean())\n    }).passthrough())\n}).passthrough();\nvar InitializeResultSchema = ResultSchema.extend({\n    protocolVersion: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    capabilities: ServerCapabilitiesSchema,\n    serverInfo: ClientOrServerImplementationSchema,\n    instructions: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.string())\n});\nvar PaginatedResultSchema = ResultSchema.extend({\n    nextCursor: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.string())\n});\nvar ToolSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    description: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.string()),\n    inputSchema: zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"object\"),\n        properties: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({}).passthrough())\n    }).passthrough()\n}).passthrough();\nvar ListToolsResultSchema = PaginatedResultSchema.extend({\n    tools: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(ToolSchema)\n});\nvar TextContentSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"text\"),\n    text: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n}).passthrough();\nvar ImageContentSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"image\"),\n    data: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().base64(),\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n}).passthrough();\nvar ResourceContentsSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    /**\n   * The URI of this resource.\n   */ uri: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    /**\n   * The MIME type of this resource, if known.\n   */ mimeType: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.string())\n}).passthrough();\nvar TextResourceContentsSchema = ResourceContentsSchema.extend({\n    text: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n});\nvar BlobResourceContentsSchema = ResourceContentsSchema.extend({\n    blob: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().base64()\n});\nvar EmbeddedResourceSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"resource\"),\n    resource: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        TextResourceContentsSchema,\n        BlobResourceContentsSchema\n    ])\n}).passthrough();\nvar CallToolResultSchema = ResultSchema.extend({\n    content: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        TextContentSchema,\n        ImageContentSchema,\n        EmbeddedResourceSchema\n    ])),\n    isError: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().default(false).optional()\n}).or(ResultSchema.extend({\n    toolResult: zod__WEBPACK_IMPORTED_MODULE_4__.z.unknown()\n}));\n// core/tool/mcp/json-rpc-message.ts\nvar JSONRPC_VERSION = \"2.0\";\nvar JSONRPCRequestSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(JSONRPC_VERSION),\n    id: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.number().int()\n    ])\n}).merge(RequestSchema).strict();\nvar JSONRPCResponseSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(JSONRPC_VERSION),\n    id: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.number().int()\n    ]),\n    result: ResultSchema\n}).strict();\nvar JSONRPCErrorSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(JSONRPC_VERSION),\n    id: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.number().int()\n    ]),\n    error: zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        code: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().int(),\n        message: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        data: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(zod__WEBPACK_IMPORTED_MODULE_4__.z.unknown())\n    })\n}).strict();\nvar JSONRPCNotificationSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(JSONRPC_VERSION)\n}).merge(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    method: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    params: zod__WEBPACK_IMPORTED_MODULE_4__.z.optional(BaseParamsSchema)\n})).strict();\nvar JSONRPCMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n    JSONRPCRequestSchema,\n    JSONRPCNotificationSchema,\n    JSONRPCResponseSchema,\n    JSONRPCErrorSchema\n]);\n// core/tool/mcp/mcp-sse-transport.ts\nvar SseMCPTransport = class {\n    constructor({ url, headers }){\n        this.connected = false;\n        this.url = new URL(url);\n        this.headers = headers;\n    }\n    async start() {\n        return new Promise((resolve, reject)=>{\n            if (this.connected) {\n                return resolve();\n            }\n            this.abortController = new AbortController();\n            const establishConnection = async ()=>{\n                var _a17, _b, _c;\n                try {\n                    const headers = new Headers(this.headers);\n                    headers.set(\"Accept\", \"text/event-stream\");\n                    const response = await fetch(this.url.href, {\n                        headers,\n                        signal: (_a17 = this.abortController) == null ? void 0 : _a17.signal\n                    });\n                    if (!response.ok || !response.body) {\n                        const error = new MCPClientError({\n                            message: `MCP SSE Transport Error: ${response.status} ${response.statusText}`\n                        });\n                        (_b = this.onerror) == null ? void 0 : _b.call(this, error);\n                        return reject(error);\n                    }\n                    const stream = response.body.pipeThrough(new TextDecoderStream()).pipeThrough((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createEventSourceParserStream)());\n                    const reader = stream.getReader();\n                    const processEvents = async ()=>{\n                        var _a18, _b2, _c2;\n                        try {\n                            while(true){\n                                const { done, value } = await reader.read();\n                                if (done) {\n                                    if (this.connected) {\n                                        this.connected = false;\n                                        throw new MCPClientError({\n                                            message: \"MCP SSE Transport Error: Connection closed unexpectedly\"\n                                        });\n                                    }\n                                    return;\n                                }\n                                const { event, data } = value;\n                                if (event === \"endpoint\") {\n                                    this.endpoint = new URL(data, this.url);\n                                    if (this.endpoint.origin !== this.url.origin) {\n                                        throw new MCPClientError({\n                                            message: `MCP SSE Transport Error: Endpoint origin does not match connection origin: ${this.endpoint.origin}`\n                                        });\n                                    }\n                                    this.connected = true;\n                                    resolve();\n                                } else if (event === \"message\") {\n                                    try {\n                                        const message = JSONRPCMessageSchema.parse(JSON.parse(data));\n                                        (_a18 = this.onmessage) == null ? void 0 : _a18.call(this, message);\n                                    } catch (error) {\n                                        const e = new MCPClientError({\n                                            message: \"MCP SSE Transport Error: Failed to parse message\",\n                                            cause: error\n                                        });\n                                        (_b2 = this.onerror) == null ? void 0 : _b2.call(this, e);\n                                    }\n                                }\n                            }\n                        } catch (error) {\n                            if (error instanceof Error && error.name === \"AbortError\") {\n                                return;\n                            }\n                            (_c2 = this.onerror) == null ? void 0 : _c2.call(this, error);\n                            reject(error);\n                        }\n                    };\n                    this.sseConnection = {\n                        close: ()=>reader.cancel()\n                    };\n                    processEvents();\n                } catch (error) {\n                    if (error instanceof Error && error.name === \"AbortError\") {\n                        return;\n                    }\n                    (_c = this.onerror) == null ? void 0 : _c.call(this, error);\n                    reject(error);\n                }\n            };\n            establishConnection();\n        });\n    }\n    async close() {\n        var _a17, _b, _c;\n        this.connected = false;\n        (_a17 = this.sseConnection) == null ? void 0 : _a17.close();\n        (_b = this.abortController) == null ? void 0 : _b.abort();\n        (_c = this.onclose) == null ? void 0 : _c.call(this);\n    }\n    async send(message) {\n        var _a17, _b, _c;\n        if (!this.endpoint || !this.connected) {\n            throw new MCPClientError({\n                message: \"MCP SSE Transport Error: Not connected\"\n            });\n        }\n        try {\n            const headers = new Headers(this.headers);\n            headers.set(\"Content-Type\", \"application/json\");\n            const init = {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(message),\n                signal: (_a17 = this.abortController) == null ? void 0 : _a17.signal\n            };\n            const response = await fetch(this.endpoint, init);\n            if (!response.ok) {\n                const text2 = await response.text().catch(()=>null);\n                const error = new MCPClientError({\n                    message: `MCP SSE Transport Error: POSTing to endpoint (HTTP ${response.status}): ${text2}`\n                });\n                (_b = this.onerror) == null ? void 0 : _b.call(this, error);\n                return;\n            }\n        } catch (error) {\n            (_c = this.onerror) == null ? void 0 : _c.call(this, error);\n            return;\n        }\n    }\n};\n// core/tool/mcp/mcp-transport.ts\nfunction createMcpTransport(config) {\n    if (config.type !== \"sse\") {\n        throw new MCPClientError({\n            message: \"Unsupported or invalid transport configuration. If you are using a custom transport, make sure it implements the MCPTransport interface.\"\n        });\n    }\n    return new SseMCPTransport(config);\n}\nfunction isCustomMcpTransport(transport) {\n    return \"start\" in transport && typeof transport.start === \"function\" && \"send\" in transport && typeof transport.send === \"function\" && \"close\" in transport && typeof transport.close === \"function\";\n}\n// core/tool/mcp/mcp-client.ts\nvar CLIENT_VERSION = \"1.0.0\";\nasync function createMCPClient(config) {\n    const client = new MCPClient(config);\n    await client.init();\n    return client;\n}\nvar MCPClient = class {\n    constructor({ transport: transportConfig, name: name17 = \"ai-sdk-mcp-client\", onUncaughtError }){\n        this.requestMessageId = 0;\n        this.responseHandlers = /* @__PURE__ */ new Map();\n        this.serverCapabilities = {};\n        this.isClosed = true;\n        this.onUncaughtError = onUncaughtError;\n        if (isCustomMcpTransport(transportConfig)) {\n            this.transport = transportConfig;\n        } else {\n            this.transport = createMcpTransport(transportConfig);\n        }\n        this.transport.onclose = ()=>this.onClose();\n        this.transport.onerror = (error)=>this.onError(error);\n        this.transport.onmessage = (message)=>{\n            if (\"method\" in message) {\n                this.onError(new MCPClientError({\n                    message: \"Unsupported message type\"\n                }));\n                return;\n            }\n            this.onResponse(message);\n        };\n        this.clientInfo = {\n            name: name17,\n            version: CLIENT_VERSION\n        };\n    }\n    async init() {\n        try {\n            await this.transport.start();\n            this.isClosed = false;\n            const result = await this.request({\n                request: {\n                    method: \"initialize\",\n                    params: {\n                        protocolVersion: LATEST_PROTOCOL_VERSION,\n                        capabilities: {},\n                        clientInfo: this.clientInfo\n                    }\n                },\n                resultSchema: InitializeResultSchema\n            });\n            if (result === void 0) {\n                throw new MCPClientError({\n                    message: \"Server sent invalid initialize result\"\n                });\n            }\n            if (!SUPPORTED_PROTOCOL_VERSIONS.includes(result.protocolVersion)) {\n                throw new MCPClientError({\n                    message: `Server's protocol version is not supported: ${result.protocolVersion}`\n                });\n            }\n            this.serverCapabilities = result.capabilities;\n            await this.notification({\n                method: \"notifications/initialized\"\n            });\n            return this;\n        } catch (error) {\n            await this.close();\n            throw error;\n        }\n    }\n    async close() {\n        var _a17;\n        if (this.isClosed) return;\n        await ((_a17 = this.transport) == null ? void 0 : _a17.close());\n        this.onClose();\n    }\n    async request({ request, resultSchema, options }) {\n        return new Promise((resolve, reject)=>{\n            if (this.isClosed) {\n                return reject(new MCPClientError({\n                    message: \"Attempted to send a request from a closed client\"\n                }));\n            }\n            const signal = options == null ? void 0 : options.signal;\n            signal == null ? void 0 : signal.throwIfAborted();\n            const messageId = this.requestMessageId++;\n            const jsonrpcRequest = {\n                ...request,\n                jsonrpc: \"2.0\",\n                id: messageId\n            };\n            const cleanup = ()=>{\n                this.responseHandlers.delete(messageId);\n            };\n            this.responseHandlers.set(messageId, (response)=>{\n                if (signal == null ? void 0 : signal.aborted) {\n                    return reject(new MCPClientError({\n                        message: \"Request was aborted\",\n                        cause: signal.reason\n                    }));\n                }\n                if (response instanceof Error) {\n                    return reject(response);\n                }\n                try {\n                    const result = resultSchema.parse(response.result);\n                    resolve(result);\n                } catch (error) {\n                    const parseError = new MCPClientError({\n                        message: \"Failed to parse server initialization result\",\n                        cause: error\n                    });\n                    reject(parseError);\n                }\n            });\n            this.transport.send(jsonrpcRequest).catch((error)=>{\n                cleanup();\n                reject(error);\n            });\n        });\n    }\n    async listTools({ params, options } = {}) {\n        if (!this.serverCapabilities.tools) {\n            throw new MCPClientError({\n                message: `Server does not support tools`\n            });\n        }\n        try {\n            return this.request({\n                request: {\n                    method: \"tools/list\",\n                    params\n                },\n                resultSchema: ListToolsResultSchema,\n                options\n            });\n        } catch (error) {\n            throw error;\n        }\n    }\n    async callTool({ name: name17, args, options }) {\n        if (!this.serverCapabilities.tools) {\n            throw new MCPClientError({\n                message: `Server does not support tools`\n            });\n        }\n        try {\n            return this.request({\n                request: {\n                    method: \"tools/call\",\n                    params: {\n                        name: name17,\n                        arguments: args\n                    }\n                },\n                resultSchema: CallToolResultSchema,\n                options: {\n                    signal: options == null ? void 0 : options.abortSignal\n                }\n            });\n        } catch (error) {\n            throw error;\n        }\n    }\n    async notification(notification) {\n        const jsonrpcNotification = {\n            ...notification,\n            jsonrpc: \"2.0\"\n        };\n        await this.transport.send(jsonrpcNotification);\n    }\n    /**\n   * Returns a set of AI SDK tools from the MCP server\n   * @returns A record of tool names to their implementations\n   */ async tools({ schemas = \"automatic\" } = {}) {\n        var _a17;\n        const tools = {};\n        try {\n            const listToolsResult = await this.listTools();\n            for (const { name: name17, description, inputSchema } of listToolsResult.tools){\n                if (schemas !== \"automatic\" && !(name17 in schemas)) {\n                    continue;\n                }\n                const parameters = schemas === \"automatic\" ? (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.jsonSchema)({\n                    ...inputSchema,\n                    properties: (_a17 = inputSchema.properties) != null ? _a17 : {},\n                    additionalProperties: false\n                }) : schemas[name17].parameters;\n                const self = this;\n                const toolWithExecute = tool({\n                    description,\n                    parameters,\n                    execute: async (args, options)=>{\n                        var _a18;\n                        (_a18 = options == null ? void 0 : options.abortSignal) == null ? void 0 : _a18.throwIfAborted();\n                        return self.callTool({\n                            name: name17,\n                            args,\n                            options\n                        });\n                    }\n                });\n                tools[name17] = toolWithExecute;\n            }\n            return tools;\n        } catch (error) {\n            throw error;\n        }\n    }\n    onClose() {\n        if (this.isClosed) return;\n        this.isClosed = true;\n        const error = new MCPClientError({\n            message: \"Connection closed\"\n        });\n        for (const handler of this.responseHandlers.values()){\n            handler(error);\n        }\n        this.responseHandlers.clear();\n    }\n    onError(error) {\n        if (this.onUncaughtError) {\n            this.onUncaughtError(error);\n        }\n    }\n    onResponse(response) {\n        const messageId = Number(response.id);\n        const handler = this.responseHandlers.get(messageId);\n        if (handler === void 0) {\n            throw new MCPClientError({\n                message: `Protocol error: Received a response for an unknown message ID: ${JSON.stringify(response)}`\n            });\n        }\n        this.responseHandlers.delete(messageId);\n        handler(\"result\" in response ? response : new MCPClientError({\n            message: response.error.message,\n            cause: response.error\n        }));\n    }\n};\n// core/util/cosine-similarity.ts\nfunction cosineSimilarity(vector1, vector2, options) {\n    if (vector1.length !== vector2.length) {\n        throw new InvalidArgumentError({\n            parameter: \"vector1,vector2\",\n            value: {\n                vector1Length: vector1.length,\n                vector2Length: vector2.length\n            },\n            message: `Vectors must have the same length`\n        });\n    }\n    const n = vector1.length;\n    if (n === 0) {\n        if (options == null ? void 0 : options.throwErrorForEmptyVectors) {\n            throw new InvalidArgumentError({\n                parameter: \"vector1\",\n                value: vector1,\n                message: \"Vectors cannot be empty\"\n            });\n        }\n        return 0;\n    }\n    let magnitudeSquared1 = 0;\n    let magnitudeSquared2 = 0;\n    let dotProduct = 0;\n    for(let i = 0; i < n; i++){\n        const value1 = vector1[i];\n        const value2 = vector2[i];\n        magnitudeSquared1 += value1 * value1;\n        magnitudeSquared2 += value2 * value2;\n        dotProduct += value1 * value2;\n    }\n    return magnitudeSquared1 === 0 || magnitudeSquared2 === 0 ? 0 : dotProduct / (Math.sqrt(magnitudeSquared1) * Math.sqrt(magnitudeSquared2));\n}\n// core/util/simulate-readable-stream.ts\n\nfunction simulateReadableStream({ chunks, initialDelayInMs = 0, chunkDelayInMs = 0, _internal }) {\n    var _a17;\n    const delay2 = (_a17 = _internal == null ? void 0 : _internal.delay) != null ? _a17 : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.delay;\n    let index = 0;\n    return new ReadableStream({\n        async pull (controller) {\n            if (index < chunks.length) {\n                await delay2(index === 0 ? initialDelayInMs : chunkDelayInMs);\n                controller.enqueue(chunks[index++]);\n            } else {\n                controller.close();\n            }\n        }\n    });\n}\n// streams/assistant-response.ts\n\nfunction AssistantResponse({ threadId, messageId }, process2) {\n    const stream = new ReadableStream({\n        async start (controller) {\n            var _a17;\n            const textEncoder = new TextEncoder();\n            const sendMessage = (message)=>{\n                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"assistant_message\", message)));\n            };\n            const sendDataMessage = (message)=>{\n                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"data_message\", message)));\n            };\n            const sendError = (errorMessage)=>{\n                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"error\", errorMessage)));\n            };\n            const forwardStream = async (stream2)=>{\n                var _a18, _b;\n                let result = void 0;\n                for await (const value of stream2){\n                    switch(value.event){\n                        case \"thread.message.created\":\n                            {\n                                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"assistant_message\", {\n                                    id: value.data.id,\n                                    role: \"assistant\",\n                                    content: [\n                                        {\n                                            type: \"text\",\n                                            text: {\n                                                value: \"\"\n                                            }\n                                        }\n                                    ]\n                                })));\n                                break;\n                            }\n                        case \"thread.message.delta\":\n                            {\n                                const content = (_a18 = value.data.delta.content) == null ? void 0 : _a18[0];\n                                if ((content == null ? void 0 : content.type) === \"text\" && ((_b = content.text) == null ? void 0 : _b.value) != null) {\n                                    controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"text\", content.text.value)));\n                                }\n                                break;\n                            }\n                        case \"thread.run.completed\":\n                        case \"thread.run.requires_action\":\n                            {\n                                result = value.data;\n                                break;\n                            }\n                    }\n                }\n                return result;\n            };\n            controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"assistant_control_data\", {\n                threadId,\n                messageId\n            })));\n            try {\n                await process2({\n                    sendMessage,\n                    sendDataMessage,\n                    forwardStream\n                });\n            } catch (error) {\n                sendError((_a17 = error.message) != null ? _a17 : `${error}`);\n            } finally{\n                controller.close();\n            }\n        },\n        pull (controller) {},\n        cancel () {}\n    });\n    return new Response(stream, {\n        status: 200,\n        headers: {\n            \"Content-Type\": \"text/plain; charset=utf-8\"\n        }\n    });\n}\n// streams/langchain-adapter.ts\nvar langchain_adapter_exports = {};\n__export(langchain_adapter_exports, {\n    mergeIntoDataStream: ()=>mergeIntoDataStream,\n    toDataStream: ()=>toDataStream,\n    toDataStreamResponse: ()=>toDataStreamResponse\n});\n\n// streams/stream-callbacks.ts\nfunction createCallbacksTransformer(callbacks = {}) {\n    const textEncoder = new TextEncoder();\n    let aggregatedResponse = \"\";\n    return new TransformStream({\n        async start () {\n            if (callbacks.onStart) await callbacks.onStart();\n        },\n        async transform (message, controller) {\n            controller.enqueue(textEncoder.encode(message));\n            aggregatedResponse += message;\n            if (callbacks.onToken) await callbacks.onToken(message);\n            if (callbacks.onText && typeof message === \"string\") {\n                await callbacks.onText(message);\n            }\n        },\n        async flush () {\n            if (callbacks.onCompletion) {\n                await callbacks.onCompletion(aggregatedResponse);\n            }\n            if (callbacks.onFinal) {\n                await callbacks.onFinal(aggregatedResponse);\n            }\n        }\n    });\n}\n// streams/langchain-adapter.ts\nfunction toDataStreamInternal(stream, callbacks) {\n    return stream.pipeThrough(new TransformStream({\n        transform: async (value, controller)=>{\n            var _a17;\n            if (typeof value === \"string\") {\n                controller.enqueue(value);\n                return;\n            }\n            if (\"event\" in value) {\n                if (value.event === \"on_chat_model_stream\") {\n                    forwardAIMessageChunk((_a17 = value.data) == null ? void 0 : _a17.chunk, controller);\n                }\n                return;\n            }\n            forwardAIMessageChunk(value, controller);\n        }\n    })).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({\n        transform: async (chunk, controller)=>{\n            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"text\", chunk));\n        }\n    }));\n}\nfunction toDataStream(stream, callbacks) {\n    return toDataStreamInternal(stream, callbacks).pipeThrough(new TextEncoderStream());\n}\nfunction toDataStreamResponse(stream, options) {\n    var _a17;\n    const dataStream = toDataStreamInternal(stream, options == null ? void 0 : options.callbacks).pipeThrough(new TextEncoderStream());\n    const data = options == null ? void 0 : options.data;\n    const init = options == null ? void 0 : options.init;\n    const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;\n    return new Response(responseStream, {\n        status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,\n        statusText: init == null ? void 0 : init.statusText,\n        headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {\n            contentType: \"text/plain; charset=utf-8\",\n            dataStreamVersion: \"v1\"\n        })\n    });\n}\nfunction mergeIntoDataStream(stream, options) {\n    options.dataStream.merge(toDataStreamInternal(stream, options.callbacks));\n}\nfunction forwardAIMessageChunk(chunk, controller) {\n    if (typeof chunk.content === \"string\") {\n        controller.enqueue(chunk.content);\n    } else {\n        const content = chunk.content;\n        for (const item of content){\n            if (item.type === \"text\") {\n                controller.enqueue(item.text);\n            }\n        }\n    }\n}\n// streams/llamaindex-adapter.ts\nvar llamaindex_adapter_exports = {};\n__export(llamaindex_adapter_exports, {\n    mergeIntoDataStream: ()=>mergeIntoDataStream2,\n    toDataStream: ()=>toDataStream2,\n    toDataStreamResponse: ()=>toDataStreamResponse2\n});\n\n\nfunction toDataStreamInternal2(stream, callbacks) {\n    const trimStart = trimStartOfStream();\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertAsyncIteratorToReadableStream)(stream[Symbol.asyncIterator]()).pipeThrough(new TransformStream({\n        async transform (message, controller) {\n            controller.enqueue(trimStart(message.delta));\n        }\n    })).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({\n        transform: async (chunk, controller)=>{\n            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"text\", chunk));\n        }\n    }));\n}\nfunction toDataStream2(stream, callbacks) {\n    return toDataStreamInternal2(stream, callbacks).pipeThrough(new TextEncoderStream());\n}\nfunction toDataStreamResponse2(stream, options = {}) {\n    var _a17;\n    const { init, data, callbacks } = options;\n    const dataStream = toDataStreamInternal2(stream, callbacks).pipeThrough(new TextEncoderStream());\n    const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;\n    return new Response(responseStream, {\n        status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,\n        statusText: init == null ? void 0 : init.statusText,\n        headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {\n            contentType: \"text/plain; charset=utf-8\",\n            dataStreamVersion: \"v1\"\n        })\n    });\n}\nfunction mergeIntoDataStream2(stream, options) {\n    options.dataStream.merge(toDataStreamInternal2(stream, options.callbacks));\n}\nfunction trimStartOfStream() {\n    let isStreamStart = true;\n    return (text2)=>{\n        if (isStreamStart) {\n            text2 = text2.trimStart();\n            if (text2) isStreamStart = false;\n        }\n        return text2;\n    };\n}\n// streams/stream-data.ts\n\n// util/constants.ts\nvar HANGING_STREAM_WARNING_TIME_MS = 15 * 1e3;\n// streams/stream-data.ts\nvar StreamData = class {\n    constructor(){\n        this.encoder = new TextEncoder();\n        this.controller = null;\n        this.isClosed = false;\n        this.warningTimeout = null;\n        const self = this;\n        this.stream = new ReadableStream({\n            start: async (controller)=>{\n                self.controller = controller;\n                if (true) {\n                    self.warningTimeout = setTimeout(()=>{\n                        console.warn(\"The data stream is hanging. Did you forget to close it with `data.close()`?\");\n                    }, HANGING_STREAM_WARNING_TIME_MS);\n                }\n            },\n            pull: (controller)=>{},\n            cancel: (reason)=>{\n                this.isClosed = true;\n            }\n        });\n    }\n    async close() {\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        if (!this.controller) {\n            throw new Error(\"Stream controller is not initialized.\");\n        }\n        this.controller.close();\n        this.isClosed = true;\n        if (this.warningTimeout) {\n            clearTimeout(this.warningTimeout);\n        }\n    }\n    append(value) {\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        if (!this.controller) {\n            throw new Error(\"Stream controller is not initialized.\");\n        }\n        this.controller.enqueue(this.encoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"data\", [\n            value\n        ])));\n    }\n    appendMessageAnnotation(value) {\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        if (!this.controller) {\n            throw new Error(\"Stream controller is not initialized.\");\n        }\n        this.controller.enqueue(this.encoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"message_annotations\", [\n            value\n        ])));\n    }\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/dist/index.mjs\n");

/***/ })

};
;